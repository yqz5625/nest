"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_components_ImageCapture_ImageCapture_tsx"],{

/***/ "(app-pages-browser)/./components/ImageCapture/ImageCapture.css":
/*!**************************************************!*\
  !*** ./components/ImageCapture/ImageCapture.css ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"91cbdee26fbc\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvSW1hZ2VDYXB0dXJlL0ltYWdlQ2FwdHVyZS5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2NvbXBvbmVudHMvSW1hZ2VDYXB0dXJlL0ltYWdlQ2FwdHVyZS5jc3M/MTQwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjkxY2JkZWUyNmZiY1wiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/ImageCapture/ImageCapture.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/ImageCapture/ImageCapture.tsx":
/*!**************************************************!*\
  !*** ./components/ImageCapture/ImageCapture.tsx ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _dynamsoft_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../dynamsoft.config */ \"(app-pages-browser)/./dynamsoft.config.ts\");\n/* harmony import */ var dynamsoft_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! dynamsoft-core */ \"(app-pages-browser)/./node_modules/dynamsoft-core/dist/core.esm.js\");\n/* harmony import */ var dynamsoft_capture_vision_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dynamsoft-capture-vision-router */ \"(app-pages-browser)/./node_modules/dynamsoft-capture-vision-router/dist/cvr.esm.js\");\n/* harmony import */ var _ImageCapture_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ImageCapture.css */ \"(app-pages-browser)/./components/ImageCapture/ImageCapture.css\");\n\nvar _s = $RefreshSig$();\n\n // import side effects. The license, engineResourcePath, so on.\n\n\n\nfunction ImageCapture() {\n    _s();\n    const resultsContainer = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    let pCvRouter = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    let isDestroyed = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const decodeImg = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (e)=>{\n        let files = [\n            ...e.target.files\n        ];\n        e.target.value = \"\"; // reset input\n        resultsContainer.current.innerText = \"\";\n        try {\n            // ensure cvRouter is created only once\n            const cvRouter = await (pCvRouter.current = pCvRouter.current || dynamsoft_capture_vision_router__WEBPACK_IMPORTED_MODULE_3__.CaptureVisionRouter.createInstance());\n            if (isDestroyed.current) return;\n            for (let file of files){\n                // Decode selected image with 'ReadBarcodes_SpeedFirst' template.\n                const result = await cvRouter.capture(file, \"ReadBarcodes_SpeedFirst\");\n                if (isDestroyed.current) return;\n                // Print file name if there's multiple files\n                if (files.length > 1) {\n                    resultsContainer.current.innerText += \"\\n\".concat(file.name, \":\\n\");\n                }\n                for (let _item of result.items){\n                    if (_item.type !== dynamsoft_core__WEBPACK_IMPORTED_MODULE_5__.EnumCapturedResultItemType.CRIT_BARCODE) {\n                        continue; // check if captured result item is a barcode\n                    }\n                    let item = _item;\n                    resultsContainer.current.innerText += item.text + \"\\n\"; // output the decoded barcode text\n                    console.log(item.text);\n                }\n                // If no items are found, display that no barcode was detected\n                if (!result.items.length) resultsContainer.current.innerText = \"No barcode found\";\n            }\n        } catch (ex) {\n            let errMsg = ex.message || ex;\n            console.error(errMsg);\n            alert(errMsg);\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // In 'development', React runs setup and cleanup one extra time before the actual setup in Strict Mode.\n        isDestroyed.current = false;\n        // componentWillUnmount. dispose cvRouter when it's no longer needed\n        return async ()=>{\n            isDestroyed.current = true;\n            if (pCvRouter.current) {\n                try {\n                    (await pCvRouter.current).dispose();\n                } catch (_) {}\n            }\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"image-capture-container\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"input-container\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                    type: \"file\",\n                    multiple: true,\n                    accept: \".jpg,.jpeg,.icon,.gif,.svg,.webp,.png,.bmp\",\n                    onChange: decodeImg\n                }, void 0, false, {\n                    fileName: \"/Users/yujianzhu/Downloads/Archive/components/ImageCapture/ImageCapture.tsx\",\n                    lineNumber: 69,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/yujianzhu/Downloads/Archive/components/ImageCapture/ImageCapture.tsx\",\n                lineNumber: 68,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"results\",\n                ref: resultsContainer\n            }, void 0, false, {\n                fileName: \"/Users/yujianzhu/Downloads/Archive/components/ImageCapture/ImageCapture.tsx\",\n                lineNumber: 71,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/yujianzhu/Downloads/Archive/components/ImageCapture/ImageCapture.tsx\",\n        lineNumber: 67,\n        columnNumber: 5\n    }, this);\n}\n_s(ImageCapture, \"ARnpbl57TP3UZowGdGwBWI0jqy0=\");\n_c = ImageCapture;\n/* harmony default export */ __webpack_exports__[\"default\"] = (ImageCapture);\nvar _c;\n$RefreshReg$(_c, \"ImageCapture\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvSW1hZ2VDYXB0dXJlL0ltYWdlQ2FwdHVyZS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFnRjtBQUNoRCxDQUFDLCtEQUErRDtBQUNwQztBQUVVO0FBQzFDO0FBRTVCLFNBQVNNOztJQUNQLE1BQU1DLG1CQUE0RE4sNkNBQU1BLENBQUM7SUFFekUsSUFBSU8sWUFBbUVQLDZDQUFNQSxDQUFDO0lBQzlFLElBQUlRLGNBQWNSLDZDQUFNQSxDQUFDO0lBRXpCLE1BQU1TLFlBQVlQLGtEQUFXQSxDQUFDLE9BQU9RO1FBQ25DLElBQUlDLFFBQVE7ZUFBS0QsRUFBRUUsTUFBTSxDQUFDRCxLQUFLO1NBQW1CO1FBQ2xERCxFQUFFRSxNQUFNLENBQUNDLEtBQUssR0FBRyxJQUFJLGNBQWM7UUFDbkNQLGlCQUFpQlEsT0FBTyxDQUFFQyxTQUFTLEdBQUc7UUFFdEMsSUFBSTtZQUNGLHVDQUF1QztZQUN2QyxNQUFNQyxXQUFXLE1BQU9ULENBQUFBLFVBQVVPLE9BQU8sR0FBR1AsVUFBVU8sT0FBTyxJQUFJVixnRkFBbUJBLENBQUNhLGNBQWMsRUFBQztZQUNwRyxJQUFJVCxZQUFZTSxPQUFPLEVBQUU7WUFFekIsS0FBSyxJQUFJSSxRQUFRUCxNQUFPO2dCQUN0QixpRUFBaUU7Z0JBQ2pFLE1BQU1RLFNBQVMsTUFBTUgsU0FBU0ksT0FBTyxDQUFDRixNQUFNO2dCQUM1QyxJQUFJVixZQUFZTSxPQUFPLEVBQUU7Z0JBRXpCLDRDQUE0QztnQkFDNUMsSUFBSUgsTUFBTVUsTUFBTSxHQUFHLEdBQUc7b0JBQ3BCZixpQkFBaUJRLE9BQU8sQ0FBRUMsU0FBUyxJQUFJLEtBQWUsT0FBVkcsS0FBS0ksSUFBSSxFQUFDO2dCQUN4RDtnQkFDQSxLQUFLLElBQUlDLFNBQVNKLE9BQU9LLEtBQUssQ0FBRTtvQkFDOUIsSUFBSUQsTUFBTUUsSUFBSSxLQUFLdEIsc0VBQTBCQSxDQUFDdUIsWUFBWSxFQUFFO3dCQUMxRCxVQUFVLDZDQUE2QztvQkFDekQ7b0JBQ0EsSUFBSUMsT0FBT0o7b0JBQ1hqQixpQkFBaUJRLE9BQU8sQ0FBRUMsU0FBUyxJQUFJWSxLQUFLQyxJQUFJLEdBQUcsTUFBTSxrQ0FBa0M7b0JBQzNGQyxRQUFRQyxHQUFHLENBQUNILEtBQUtDLElBQUk7Z0JBQ3ZCO2dCQUNBLDhEQUE4RDtnQkFDOUQsSUFBSSxDQUFDVCxPQUFPSyxLQUFLLENBQUNILE1BQU0sRUFBRWYsaUJBQWlCUSxPQUFPLENBQUVDLFNBQVMsR0FBRztZQUNsRTtRQUNGLEVBQUUsT0FBT2dCLElBQVM7WUFDaEIsSUFBSUMsU0FBU0QsR0FBR0UsT0FBTyxJQUFJRjtZQUMzQkYsUUFBUUssS0FBSyxDQUFDRjtZQUNkRyxNQUFNSDtRQUNSO0lBQ0YsR0FBRyxFQUFFO0lBRUwvQixnREFBU0EsQ0FBQztRQUNSLHdHQUF3RztRQUN4R08sWUFBWU0sT0FBTyxHQUFHO1FBRXRCLG9FQUFvRTtRQUNwRSxPQUFPO1lBQ0xOLFlBQVlNLE9BQU8sR0FBRztZQUN0QixJQUFJUCxVQUFVTyxPQUFPLEVBQUU7Z0JBQ3JCLElBQUk7b0JBQ0QsT0FBTVAsVUFBVU8sT0FBTyxFQUFFc0IsT0FBTztnQkFDbkMsRUFBRSxPQUFPQyxHQUFHLENBQUM7WUFDZjtRQUNGO0lBQ0YsR0FBRyxFQUFFO0lBRUwscUJBQ0UsOERBQUNDO1FBQUlDLFdBQVU7OzBCQUNiLDhEQUFDRDtnQkFBSUMsV0FBVTswQkFDYiw0RUFBQ0M7b0JBQU1mLE1BQUs7b0JBQU9nQixRQUFRO29CQUFDQyxRQUFPO29CQUE2Q0MsVUFBVWxDOzs7Ozs7Ozs7OzswQkFFNUYsOERBQUM2QjtnQkFBSUMsV0FBVTtnQkFBVUssS0FBS3RDOzs7Ozs7Ozs7Ozs7QUFHcEM7R0FsRVNEO0tBQUFBO0FBb0VULCtEQUFlQSxZQUFZQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2NvbXBvbmVudHMvSW1hZ2VDYXB0dXJlL0ltYWdlQ2FwdHVyZS50c3g/MjA5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QsIE11dGFibGVSZWZPYmplY3QsIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgXCIuLi8uLi9keW5hbXNvZnQuY29uZmlnXCI7IC8vIGltcG9ydCBzaWRlIGVmZmVjdHMuIFRoZSBsaWNlbnNlLCBlbmdpbmVSZXNvdXJjZVBhdGgsIHNvIG9uLlxuaW1wb3J0IHsgRW51bUNhcHR1cmVkUmVzdWx0SXRlbVR5cGUgfSBmcm9tIFwiZHluYW1zb2Z0LWNvcmVcIjtcbmltcG9ydCB7IEJhcmNvZGVSZXN1bHRJdGVtIH0gZnJvbSBcImR5bmFtc29mdC1iYXJjb2RlLXJlYWRlclwiO1xuaW1wb3J0IHsgQ2FwdHVyZVZpc2lvblJvdXRlciB9IGZyb20gXCJkeW5hbXNvZnQtY2FwdHVyZS12aXNpb24tcm91dGVyXCI7XG5pbXBvcnQgXCIuL0ltYWdlQ2FwdHVyZS5jc3NcIjtcblxuZnVuY3Rpb24gSW1hZ2VDYXB0dXJlKCkge1xuICBjb25zdCByZXN1bHRzQ29udGFpbmVyOiBNdXRhYmxlUmVmT2JqZWN0PEhUTUxEaXZFbGVtZW50IHwgbnVsbD4gPSB1c2VSZWYobnVsbCk7XG5cbiAgbGV0IHBDdlJvdXRlcjogTXV0YWJsZVJlZk9iamVjdDxQcm9taXNlPENhcHR1cmVWaXNpb25Sb3V0ZXI+IHwgbnVsbD4gPSB1c2VSZWYobnVsbCk7XG4gIGxldCBpc0Rlc3Ryb3llZCA9IHVzZVJlZihmYWxzZSk7XG5cbiAgY29uc3QgZGVjb2RlSW1nID0gdXNlQ2FsbGJhY2soYXN5bmMgKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgbGV0IGZpbGVzID0gWy4uLihlLnRhcmdldC5maWxlcyBhcyBhbnkgYXMgRmlsZVtdKV07XG4gICAgZS50YXJnZXQudmFsdWUgPSBcIlwiOyAvLyByZXNldCBpbnB1dFxuICAgIHJlc3VsdHNDb250YWluZXIuY3VycmVudCEuaW5uZXJUZXh0ID0gXCJcIjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBlbnN1cmUgY3ZSb3V0ZXIgaXMgY3JlYXRlZCBvbmx5IG9uY2VcbiAgICAgIGNvbnN0IGN2Um91dGVyID0gYXdhaXQgKHBDdlJvdXRlci5jdXJyZW50ID0gcEN2Um91dGVyLmN1cnJlbnQgfHwgQ2FwdHVyZVZpc2lvblJvdXRlci5jcmVhdGVJbnN0YW5jZSgpKTtcbiAgICAgIGlmIChpc0Rlc3Ryb3llZC5jdXJyZW50KSByZXR1cm47XG5cbiAgICAgIGZvciAobGV0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgLy8gRGVjb2RlIHNlbGVjdGVkIGltYWdlIHdpdGggJ1JlYWRCYXJjb2Rlc19TcGVlZEZpcnN0JyB0ZW1wbGF0ZS5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY3ZSb3V0ZXIuY2FwdHVyZShmaWxlLCBcIlJlYWRCYXJjb2Rlc19TcGVlZEZpcnN0XCIpO1xuICAgICAgICBpZiAoaXNEZXN0cm95ZWQuY3VycmVudCkgcmV0dXJuO1xuXG4gICAgICAgIC8vIFByaW50IGZpbGUgbmFtZSBpZiB0aGVyZSdzIG11bHRpcGxlIGZpbGVzXG4gICAgICAgIGlmIChmaWxlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcmVzdWx0c0NvbnRhaW5lci5jdXJyZW50IS5pbm5lclRleHQgKz0gYFxcbiR7ZmlsZS5uYW1lfTpcXG5gO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IF9pdGVtIG9mIHJlc3VsdC5pdGVtcykge1xuICAgICAgICAgIGlmIChfaXRlbS50eXBlICE9PSBFbnVtQ2FwdHVyZWRSZXN1bHRJdGVtVHlwZS5DUklUX0JBUkNPREUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBjaGVjayBpZiBjYXB0dXJlZCByZXN1bHQgaXRlbSBpcyBhIGJhcmNvZGVcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IGl0ZW0gPSBfaXRlbSBhcyBCYXJjb2RlUmVzdWx0SXRlbTtcbiAgICAgICAgICByZXN1bHRzQ29udGFpbmVyLmN1cnJlbnQhLmlubmVyVGV4dCArPSBpdGVtLnRleHQgKyBcIlxcblwiOyAvLyBvdXRwdXQgdGhlIGRlY29kZWQgYmFyY29kZSB0ZXh0XG4gICAgICAgICAgY29uc29sZS5sb2coaXRlbS50ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBubyBpdGVtcyBhcmUgZm91bmQsIGRpc3BsYXkgdGhhdCBubyBiYXJjb2RlIHdhcyBkZXRlY3RlZFxuICAgICAgICBpZiAoIXJlc3VsdC5pdGVtcy5sZW5ndGgpIHJlc3VsdHNDb250YWluZXIuY3VycmVudCEuaW5uZXJUZXh0ID0gXCJObyBiYXJjb2RlIGZvdW5kXCI7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXg6IGFueSkge1xuICAgICAgbGV0IGVyck1zZyA9IGV4Lm1lc3NhZ2UgfHwgZXg7XG4gICAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7XG4gICAgICBhbGVydChlcnJNc2cpO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIHVzZUVmZmVjdCgoKTogYW55ID0+IHtcbiAgICAvLyBJbiAnZGV2ZWxvcG1lbnQnLCBSZWFjdCBydW5zIHNldHVwIGFuZCBjbGVhbnVwIG9uZSBleHRyYSB0aW1lIGJlZm9yZSB0aGUgYWN0dWFsIHNldHVwIGluIFN0cmljdCBNb2RlLlxuICAgIGlzRGVzdHJveWVkLmN1cnJlbnQgPSBmYWxzZTtcblxuICAgIC8vIGNvbXBvbmVudFdpbGxVbm1vdW50LiBkaXNwb3NlIGN2Um91dGVyIHdoZW4gaXQncyBubyBsb25nZXIgbmVlZGVkXG4gICAgcmV0dXJuIGFzeW5jICgpID0+IHtcbiAgICAgIGlzRGVzdHJveWVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgaWYgKHBDdlJvdXRlci5jdXJyZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgKGF3YWl0IHBDdlJvdXRlci5jdXJyZW50KS5kaXNwb3NlKCk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHt9XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJpbWFnZS1jYXB0dXJlLWNvbnRhaW5lclwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgbXVsdGlwbGUgYWNjZXB0PVwiLmpwZywuanBlZywuaWNvbiwuZ2lmLC5zdmcsLndlYnAsLnBuZywuYm1wXCIgb25DaGFuZ2U9e2RlY29kZUltZ30gLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZXN1bHRzXCIgcmVmPXtyZXN1bHRzQ29udGFpbmVyfT48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgSW1hZ2VDYXB0dXJlO1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlUmVmIiwidXNlRWZmZWN0IiwidXNlQ2FsbGJhY2siLCJFbnVtQ2FwdHVyZWRSZXN1bHRJdGVtVHlwZSIsIkNhcHR1cmVWaXNpb25Sb3V0ZXIiLCJJbWFnZUNhcHR1cmUiLCJyZXN1bHRzQ29udGFpbmVyIiwicEN2Um91dGVyIiwiaXNEZXN0cm95ZWQiLCJkZWNvZGVJbWciLCJlIiwiZmlsZXMiLCJ0YXJnZXQiLCJ2YWx1ZSIsImN1cnJlbnQiLCJpbm5lclRleHQiLCJjdlJvdXRlciIsImNyZWF0ZUluc3RhbmNlIiwiZmlsZSIsInJlc3VsdCIsImNhcHR1cmUiLCJsZW5ndGgiLCJuYW1lIiwiX2l0ZW0iLCJpdGVtcyIsInR5cGUiLCJDUklUX0JBUkNPREUiLCJpdGVtIiwidGV4dCIsImNvbnNvbGUiLCJsb2ciLCJleCIsImVyck1zZyIsIm1lc3NhZ2UiLCJlcnJvciIsImFsZXJ0IiwiZGlzcG9zZSIsIl8iLCJkaXYiLCJjbGFzc05hbWUiLCJpbnB1dCIsIm11bHRpcGxlIiwiYWNjZXB0Iiwib25DaGFuZ2UiLCJyZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/ImageCapture/ImageCapture.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./dynamsoft.config.ts":
/*!*****************************!*\
  !*** ./dynamsoft.config.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var dynamsoft_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dynamsoft-core */ \"(app-pages-browser)/./node_modules/dynamsoft-core/dist/core.esm.js\");\n/* harmony import */ var dynamsoft_license__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dynamsoft-license */ \"(app-pages-browser)/./node_modules/dynamsoft-license/dist/license.esm.js\");\n/* harmony import */ var dynamsoft_barcode_reader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dynamsoft-barcode-reader */ \"(app-pages-browser)/./node_modules/dynamsoft-barcode-reader/dist/dbr.esm.js\");\n/* harmony import */ var dynamsoft_document_normalizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dynamsoft-document-normalizer */ \"(app-pages-browser)/./node_modules/dynamsoft-document-normalizer/dist/ddn.esm.js\");\n/* harmony import */ var dynamsoft_capture_vision_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dynamsoft-capture-vision-router */ \"(app-pages-browser)/./node_modules/dynamsoft-capture-vision-router/dist/cvr.esm.js\");\n\n\n\n\n\n\n// Configures the paths where the .wasm files and other necessary resources for modules are located.\ndynamsoft_core__WEBPACK_IMPORTED_MODULE_4__.CoreModule.engineResourcePaths.rootDirectory = \"https://cdn.jsdelivr.net/npm/\";\n/** LICENSE ALERT - README\n * To use the library, you need to first specify a license key using the API \"initLicense()\" as shown below.\n */ dynamsoft_license__WEBPACK_IMPORTED_MODULE_0__.LicenseManager.initLicense(\"DLS2eyJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSJ9\");\n/**\n * You can visit https://www.dynamsoft.com/customer/license/trialLicense?utm_source=samples&product=dbr&package=js to get your own trial license good for 30 days.\n * Note that if you downloaded this sample from Dynamsoft while logged in, the above license key may already be your own 30-day trial license.\n * For more information, see https://www.dynamsoft.com/barcode-reader/docs/web/programming/javascript/user-guide/index.html?ver=10.4.2001&cVer=true#specify-the-license&utm_source=samples or contact support@dynamsoft.com.\n * LICENSE ALERT - THE END\n */ // Optional. Preload \"BarcodeReader\" module for reading barcodes. It will save time on the initial decoding by skipping the module loading.\ndynamsoft_core__WEBPACK_IMPORTED_MODULE_4__.CoreModule.loadWasm([\n    \"DDN\"\n]);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2R5bmFtc29mdC5jb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRDO0FBQ087QUFDakI7QUFDUDtBQUNZO0FBQ0U7QUFFekMsb0dBQW9HO0FBQ3BHQSxzREFBVUEsQ0FBQ0UsbUJBQW1CLENBQUNDLGFBQWEsR0FBRztBQUUvQzs7Q0FFQyxHQUVERiw2REFBY0EsQ0FBQ0csV0FBVyxDQUFDO0FBRTNCOzs7OztDQUtDLEdBRUQsMklBQTJJO0FBQzNJSixzREFBVUEsQ0FBQ0ssUUFBUSxDQUFDO0lBQUM7Q0FBTSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9keW5hbXNvZnQuY29uZmlnLnRzP2ViODEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29yZU1vZHVsZSB9IGZyb20gXCJkeW5hbXNvZnQtY29yZVwiO1xuaW1wb3J0IHsgTGljZW5zZU1hbmFnZXIgfSBmcm9tIFwiZHluYW1zb2Z0LWxpY2Vuc2VcIjtcbmltcG9ydCBcImR5bmFtc29mdC1iYXJjb2RlLXJlYWRlclwiO1xuaW1wb3J0IFwiZHluYW1zb2Z0LWxpY2Vuc2VcIjtcbmltcG9ydCBcImR5bmFtc29mdC1kb2N1bWVudC1ub3JtYWxpemVyXCI7XG5pbXBvcnQgXCJkeW5hbXNvZnQtY2FwdHVyZS12aXNpb24tcm91dGVyXCI7XG5cbi8vIENvbmZpZ3VyZXMgdGhlIHBhdGhzIHdoZXJlIHRoZSAud2FzbSBmaWxlcyBhbmQgb3RoZXIgbmVjZXNzYXJ5IHJlc291cmNlcyBmb3IgbW9kdWxlcyBhcmUgbG9jYXRlZC5cbkNvcmVNb2R1bGUuZW5naW5lUmVzb3VyY2VQYXRocy5yb290RGlyZWN0b3J5ID0gXCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL1wiO1xuXG4vKiogTElDRU5TRSBBTEVSVCAtIFJFQURNRVxuICogVG8gdXNlIHRoZSBsaWJyYXJ5LCB5b3UgbmVlZCB0byBmaXJzdCBzcGVjaWZ5IGEgbGljZW5zZSBrZXkgdXNpbmcgdGhlIEFQSSBcImluaXRMaWNlbnNlKClcIiBhcyBzaG93biBiZWxvdy5cbiAqL1xuXG5MaWNlbnNlTWFuYWdlci5pbml0TGljZW5zZShcIkRMUzJleUp2Y21kaGJtbDZZWFJwYjI1SlJDSTZJakl3TURBd01TSjlcIik7XG5cbi8qKlxuICogWW91IGNhbiB2aXNpdCBodHRwczovL3d3dy5keW5hbXNvZnQuY29tL2N1c3RvbWVyL2xpY2Vuc2UvdHJpYWxMaWNlbnNlP3V0bV9zb3VyY2U9c2FtcGxlcyZwcm9kdWN0PWRiciZwYWNrYWdlPWpzIHRvIGdldCB5b3VyIG93biB0cmlhbCBsaWNlbnNlIGdvb2QgZm9yIDMwIGRheXMuXG4gKiBOb3RlIHRoYXQgaWYgeW91IGRvd25sb2FkZWQgdGhpcyBzYW1wbGUgZnJvbSBEeW5hbXNvZnQgd2hpbGUgbG9nZ2VkIGluLCB0aGUgYWJvdmUgbGljZW5zZSBrZXkgbWF5IGFscmVhZHkgYmUgeW91ciBvd24gMzAtZGF5IHRyaWFsIGxpY2Vuc2UuXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIGh0dHBzOi8vd3d3LmR5bmFtc29mdC5jb20vYmFyY29kZS1yZWFkZXIvZG9jcy93ZWIvcHJvZ3JhbW1pbmcvamF2YXNjcmlwdC91c2VyLWd1aWRlL2luZGV4Lmh0bWw/dmVyPTEwLjQuMjAwMSZjVmVyPXRydWUjc3BlY2lmeS10aGUtbGljZW5zZSZ1dG1fc291cmNlPXNhbXBsZXMgb3IgY29udGFjdCBzdXBwb3J0QGR5bmFtc29mdC5jb20uXG4gKiBMSUNFTlNFIEFMRVJUIC0gVEhFIEVORFxuICovXG5cbi8vIE9wdGlvbmFsLiBQcmVsb2FkIFwiQmFyY29kZVJlYWRlclwiIG1vZHVsZSBmb3IgcmVhZGluZyBiYXJjb2Rlcy4gSXQgd2lsbCBzYXZlIHRpbWUgb24gdGhlIGluaXRpYWwgZGVjb2RpbmcgYnkgc2tpcHBpbmcgdGhlIG1vZHVsZSBsb2FkaW5nLlxuQ29yZU1vZHVsZS5sb2FkV2FzbShbXCJERE5cIl0pO1xuIl0sIm5hbWVzIjpbIkNvcmVNb2R1bGUiLCJMaWNlbnNlTWFuYWdlciIsImVuZ2luZVJlc291cmNlUGF0aHMiLCJyb290RGlyZWN0b3J5IiwiaW5pdExpY2Vuc2UiLCJsb2FkV2FzbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./dynamsoft.config.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/dynamsoft-barcode-reader/dist/dbr.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/dynamsoft-barcode-reader/dist/dbr.esm.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BarcodeReaderModule: function() { return /* binding */ O; },\n/* harmony export */   EnumBarcodeFormat: function() { return /* binding */ i; },\n/* harmony export */   EnumDeblurMode: function() { return /* binding */ L; },\n/* harmony export */   EnumExtendedBarcodeResultType: function() { return /* binding */ C; },\n/* harmony export */   EnumLocalizationMode: function() { return /* binding */ N; },\n/* harmony export */   EnumQRCodeErrorCorrectionLevel: function() { return /* binding */ S; }\n/* harmony export */ });\n/* harmony import */ var dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dynamsoft-core */ \"(app-pages-browser)/./node_modules/dynamsoft-core/dist/core.esm.js\");\n/*!\n* Dynamsoft JavaScript Library\n* @product Dynamsoft Barcode Reader JS Edition\n* @website http://www.dynamsoft.com\n* @copyright Copyright 2024, Dynamsoft Corporation\n* @author Dynamsoft\n* @version 10.4.20\n* @fileoverview Dynamsoft JavaScript Library for Barcode Reader\n* More info on dbr JS: https://www.dynamsoft.com/barcode-reader/docs/web/programming/javascript/\n*/\nconst R=\"undefined\"==typeof self,T=(()=>{if(!R&&document.currentScript){let _=document.currentScript.src,I=_.indexOf(\"?\");if(-1!=I)_=_.substring(0,I);else{let I=_.indexOf(\"#\");-1!=I&&(_=_.substring(0,I))}return _.substring(0,_.lastIndexOf(\"/\")+1)}return\"./\"})(),t=_=>{if(null==_&&(_=\"./\"),R);else{let I=document.createElement(\"a\");I.href=_,_=I.href}return _.endsWith(\"/\")||(_+=\"/\"),_};dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.dbr={version:\"10.4.20\",path:T},dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.workerAutoResources.dbr={js:!1,wasm:!0,deps:[\"license\",\"dip\"]},dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapPackageRegister.dbr={};const D=\"1.4.10\";\"string\"!=typeof dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.std&&(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.compareVersion)(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.std.version,D)<0&&(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.std={version:D,path:t(T+`../../dynamsoft-capture-vision-std@${D}/dist/`)});const n=\"2.4.20\";(!dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.dip||\"string\"!=typeof dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.dip&&(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.compareVersion)(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.dip.version,n)<0)&&(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.dip={version:n,path:t(T+`../../dynamsoft-image-processing@${n}/dist/`)});class O{static getVersion(){const _=dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.innerVersions.dbr&&dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.innerVersions.dbr.wasm,I=dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.innerVersions.dbr&&dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.innerVersions.dbr.worker;return`10.4.20(Worker: ${I||\"Not Loaded\"}, Wasm: ${_||\"Not Loaded\"})`}}const i={BF_NULL:BigInt(0),BF_ALL:BigInt(\"0xFFFFFFFEFFFFFFFF\"),BF_DEFAULT:BigInt(4265345023),BF_ONED:BigInt(3147775),BF_GS1_DATABAR:BigInt(260096),BF_CODE_39:BigInt(1),BF_CODE_128:BigInt(2),BF_CODE_93:BigInt(4),BF_CODABAR:BigInt(8),BF_ITF:BigInt(16),BF_EAN_13:BigInt(32),BF_EAN_8:BigInt(64),BF_UPC_A:BigInt(128),BF_UPC_E:BigInt(256),BF_INDUSTRIAL_25:BigInt(512),BF_CODE_39_EXTENDED:BigInt(1024),BF_GS1_DATABAR_OMNIDIRECTIONAL:BigInt(2048),BF_GS1_DATABAR_TRUNCATED:BigInt(4096),BF_GS1_DATABAR_STACKED:BigInt(8192),BF_GS1_DATABAR_STACKED_OMNIDIRECTIONAL:BigInt(16384),BF_GS1_DATABAR_EXPANDED:BigInt(32768),BF_GS1_DATABAR_EXPANDED_STACKED:BigInt(65536),BF_GS1_DATABAR_LIMITED:BigInt(131072),BF_PATCHCODE:BigInt(262144),BF_CODE_32:BigInt(16777216),BF_PDF417:BigInt(33554432),BF_QR_CODE:BigInt(67108864),BF_DATAMATRIX:BigInt(134217728),BF_AZTEC:BigInt(268435456),BF_MAXICODE:BigInt(536870912),BF_MICRO_QR:BigInt(1073741824),BF_MICRO_PDF417:BigInt(524288),BF_GS1_COMPOSITE:BigInt(2147483648),BF_MSI_CODE:BigInt(1048576),BF_CODE_11:BigInt(2097152),BF_TWO_DIGIT_ADD_ON:BigInt(4194304),BF_FIVE_DIGIT_ADD_ON:BigInt(8388608),BF_MATRIX_25:BigInt(68719476736),BF_POSTALCODE:BigInt(0x3f0000000000000),BF_NONSTANDARD_BARCODE:BigInt(4294967296),BF_USPSINTELLIGENTMAIL:BigInt(4503599627370496),BF_POSTNET:BigInt(9007199254740992),BF_PLANET:BigInt(0x40000000000000),BF_AUSTRALIANPOST:BigInt(0x80000000000000),BF_RM4SCC:BigInt(72057594037927940),BF_KIX:BigInt(0x200000000000000),BF_DOTCODE:BigInt(8589934592),BF_PHARMACODE_ONE_TRACK:BigInt(17179869184),BF_PHARMACODE_TWO_TRACK:BigInt(34359738368),BF_PHARMACODE:BigInt(51539607552)};var C,S,N,L;!function(_){_[_.EBRT_STANDARD_RESULT=0]=\"EBRT_STANDARD_RESULT\",_[_.EBRT_CANDIDATE_RESULT=1]=\"EBRT_CANDIDATE_RESULT\",_[_.EBRT_PARTIAL_RESULT=2]=\"EBRT_PARTIAL_RESULT\"}(C||(C={})),function(_){_[_.QRECL_ERROR_CORRECTION_H=0]=\"QRECL_ERROR_CORRECTION_H\",_[_.QRECL_ERROR_CORRECTION_L=1]=\"QRECL_ERROR_CORRECTION_L\",_[_.QRECL_ERROR_CORRECTION_M=2]=\"QRECL_ERROR_CORRECTION_M\",_[_.QRECL_ERROR_CORRECTION_Q=3]=\"QRECL_ERROR_CORRECTION_Q\"}(S||(S={})),function(_){_[_.LM_AUTO=1]=\"LM_AUTO\",_[_.LM_CONNECTED_BLOCKS=2]=\"LM_CONNECTED_BLOCKS\",_[_.LM_STATISTICS=4]=\"LM_STATISTICS\",_[_.LM_LINES=8]=\"LM_LINES\",_[_.LM_SCAN_DIRECTLY=16]=\"LM_SCAN_DIRECTLY\",_[_.LM_STATISTICS_MARKS=32]=\"LM_STATISTICS_MARKS\",_[_.LM_STATISTICS_POSTAL_CODE=64]=\"LM_STATISTICS_POSTAL_CODE\",_[_.LM_CENTRE=128]=\"LM_CENTRE\",_[_.LM_ONED_FAST_SCAN=256]=\"LM_ONED_FAST_SCAN\",_[_.LM_REV=-2147483648]=\"LM_REV\",_[_.LM_SKIP=0]=\"LM_SKIP\"}(N||(N={})),function(_){_[_.DM_DIRECT_BINARIZATION=1]=\"DM_DIRECT_BINARIZATION\",_[_.DM_THRESHOLD_BINARIZATION=2]=\"DM_THRESHOLD_BINARIZATION\",_[_.DM_GRAY_EQUALIZATION=4]=\"DM_GRAY_EQUALIZATION\",_[_.DM_SMOOTHING=8]=\"DM_SMOOTHING\",_[_.DM_MORPHING=16]=\"DM_MORPHING\",_[_.DM_DEEP_ANALYSIS=32]=\"DM_DEEP_ANALYSIS\",_[_.DM_SHARPENING=64]=\"DM_SHARPENING\",_[_.DM_BASED_ON_LOC_BIN=128]=\"DM_BASED_ON_LOC_BIN\",_[_.DM_SHARPENING_SMOOTHING=256]=\"DM_SHARPENING_SMOOTHING\",_[_.DM_REV=-2147483648]=\"DM_REV\",_[_.DM_SKIP=0]=\"DM_SKIP\"}(L||(L={}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9keW5hbXNvZnQtYmFyY29kZS1yZWFkZXIvZGlzdC9kYnIuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM0SSx5Q0FBeUMsK0JBQStCLGtEQUFrRCw0QkFBNEIsS0FBSyxxQkFBcUIsNEJBQTRCLDJDQUEyQyxXQUFXLFVBQVUsd0JBQXdCLEtBQUssa0NBQWtDLGtCQUFrQixvQ0FBb0MsOERBQUMsTUFBTSx5QkFBeUIsQ0FBQywrREFBQyxNQUFNLHFDQUFxQyxDQUFDLDhEQUFDLFFBQVEsaUJBQWlCLGlCQUFpQiw4REFBQyxNQUFNLDhEQUFDLENBQUMsOERBQUMsb0JBQW9CLDhEQUFDLE1BQU0seURBQXlELEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLDhEQUFDLHVCQUF1Qiw4REFBQyxNQUFNLDhEQUFDLENBQUMsOERBQUMscUJBQXFCLDhEQUFDLE1BQU0sdURBQXVELEVBQUUsU0FBUyxFQUFFLFFBQVEsb0JBQW9CLFFBQVEseURBQUMsTUFBTSx5REFBQyxZQUFZLHlEQUFDLE1BQU0seURBQUMsWUFBWSx5QkFBeUIsZ0JBQWdCLFVBQVUsZ0JBQWdCLElBQUksU0FBUyxva0RBQW9rRCxZQUFZLGFBQWEseUpBQXlKLFNBQVMsZUFBZSw0T0FBNE8sU0FBUyxlQUFlLDhhQUE4YSxTQUFTLGVBQWUsc2VBQXNlLFNBQVMsR0FBZ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2R5bmFtc29mdC1iYXJjb2RlLXJlYWRlci9kaXN0L2Rici5lc20uanM/YzdjZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiogRHluYW1zb2Z0IEphdmFTY3JpcHQgTGlicmFyeVxuKiBAcHJvZHVjdCBEeW5hbXNvZnQgQmFyY29kZSBSZWFkZXIgSlMgRWRpdGlvblxuKiBAd2Vic2l0ZSBodHRwOi8vd3d3LmR5bmFtc29mdC5jb21cbiogQGNvcHlyaWdodCBDb3B5cmlnaHQgMjAyNCwgRHluYW1zb2Z0IENvcnBvcmF0aW9uXG4qIEBhdXRob3IgRHluYW1zb2Z0XG4qIEB2ZXJzaW9uIDEwLjQuMjBcbiogQGZpbGVvdmVydmlldyBEeW5hbXNvZnQgSmF2YVNjcmlwdCBMaWJyYXJ5IGZvciBCYXJjb2RlIFJlYWRlclxuKiBNb3JlIGluZm8gb24gZGJyIEpTOiBodHRwczovL3d3dy5keW5hbXNvZnQuY29tL2JhcmNvZGUtcmVhZGVyL2RvY3Mvd2ViL3Byb2dyYW1taW5nL2phdmFzY3JpcHQvXG4qL1xuaW1wb3J0e2F1dG9EaXNjb3ZlcnlQYXRocyBhcyBfLHdvcmtlckF1dG9SZXNvdXJjZXMgYXMgSSxtYXBQYWNrYWdlUmVnaXN0ZXIgYXMgQixjb21wYXJlVmVyc2lvbiBhcyBBLGlubmVyVmVyc2lvbnMgYXMgRX1mcm9tXCJkeW5hbXNvZnQtY29yZVwiO2NvbnN0IFI9XCJ1bmRlZmluZWRcIj09dHlwZW9mIHNlbGYsVD0oKCk9PntpZighUiYmZG9jdW1lbnQuY3VycmVudFNjcmlwdCl7bGV0IF89ZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMsST1fLmluZGV4T2YoXCI/XCIpO2lmKC0xIT1JKV89Xy5zdWJzdHJpbmcoMCxJKTtlbHNle2xldCBJPV8uaW5kZXhPZihcIiNcIik7LTEhPUkmJihfPV8uc3Vic3RyaW5nKDAsSSkpfXJldHVybiBfLnN1YnN0cmluZygwLF8ubGFzdEluZGV4T2YoXCIvXCIpKzEpfXJldHVyblwiLi9cIn0pKCksdD1fPT57aWYobnVsbD09XyYmKF89XCIuL1wiKSxSKTtlbHNle2xldCBJPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO0kuaHJlZj1fLF89SS5ocmVmfXJldHVybiBfLmVuZHNXaXRoKFwiL1wiKXx8KF8rPVwiL1wiKSxffTtfLmRicj17dmVyc2lvbjpcIjEwLjQuMjBcIixwYXRoOlR9LEkuZGJyPXtqczohMSx3YXNtOiEwLGRlcHM6W1wibGljZW5zZVwiLFwiZGlwXCJdfSxCLmRicj17fTtjb25zdCBEPVwiMS40LjEwXCI7XCJzdHJpbmdcIiE9dHlwZW9mIF8uc3RkJiZBKF8uc3RkLnZlcnNpb24sRCk8MCYmKF8uc3RkPXt2ZXJzaW9uOkQscGF0aDp0KFQrYC4uLy4uL2R5bmFtc29mdC1jYXB0dXJlLXZpc2lvbi1zdGRAJHtEfS9kaXN0L2ApfSk7Y29uc3Qgbj1cIjIuNC4yMFwiOyghXy5kaXB8fFwic3RyaW5nXCIhPXR5cGVvZiBfLmRpcCYmQShfLmRpcC52ZXJzaW9uLG4pPDApJiYoXy5kaXA9e3ZlcnNpb246bixwYXRoOnQoVCtgLi4vLi4vZHluYW1zb2Z0LWltYWdlLXByb2Nlc3NpbmdAJHtufS9kaXN0L2ApfSk7Y2xhc3MgT3tzdGF0aWMgZ2V0VmVyc2lvbigpe2NvbnN0IF89RS5kYnImJkUuZGJyLndhc20sST1FLmRiciYmRS5kYnIud29ya2VyO3JldHVybmAxMC40LjIwKFdvcmtlcjogJHtJfHxcIk5vdCBMb2FkZWRcIn0sIFdhc206ICR7X3x8XCJOb3QgTG9hZGVkXCJ9KWB9fWNvbnN0IGk9e0JGX05VTEw6QmlnSW50KDApLEJGX0FMTDpCaWdJbnQoXCIweEZGRkZGRkZFRkZGRkZGRkZcIiksQkZfREVGQVVMVDpCaWdJbnQoNDI2NTM0NTAyMyksQkZfT05FRDpCaWdJbnQoMzE0Nzc3NSksQkZfR1MxX0RBVEFCQVI6QmlnSW50KDI2MDA5NiksQkZfQ09ERV8zOTpCaWdJbnQoMSksQkZfQ09ERV8xMjg6QmlnSW50KDIpLEJGX0NPREVfOTM6QmlnSW50KDQpLEJGX0NPREFCQVI6QmlnSW50KDgpLEJGX0lURjpCaWdJbnQoMTYpLEJGX0VBTl8xMzpCaWdJbnQoMzIpLEJGX0VBTl84OkJpZ0ludCg2NCksQkZfVVBDX0E6QmlnSW50KDEyOCksQkZfVVBDX0U6QmlnSW50KDI1NiksQkZfSU5EVVNUUklBTF8yNTpCaWdJbnQoNTEyKSxCRl9DT0RFXzM5X0VYVEVOREVEOkJpZ0ludCgxMDI0KSxCRl9HUzFfREFUQUJBUl9PTU5JRElSRUNUSU9OQUw6QmlnSW50KDIwNDgpLEJGX0dTMV9EQVRBQkFSX1RSVU5DQVRFRDpCaWdJbnQoNDA5NiksQkZfR1MxX0RBVEFCQVJfU1RBQ0tFRDpCaWdJbnQoODE5MiksQkZfR1MxX0RBVEFCQVJfU1RBQ0tFRF9PTU5JRElSRUNUSU9OQUw6QmlnSW50KDE2Mzg0KSxCRl9HUzFfREFUQUJBUl9FWFBBTkRFRDpCaWdJbnQoMzI3NjgpLEJGX0dTMV9EQVRBQkFSX0VYUEFOREVEX1NUQUNLRUQ6QmlnSW50KDY1NTM2KSxCRl9HUzFfREFUQUJBUl9MSU1JVEVEOkJpZ0ludCgxMzEwNzIpLEJGX1BBVENIQ09ERTpCaWdJbnQoMjYyMTQ0KSxCRl9DT0RFXzMyOkJpZ0ludCgxNjc3NzIxNiksQkZfUERGNDE3OkJpZ0ludCgzMzU1NDQzMiksQkZfUVJfQ09ERTpCaWdJbnQoNjcxMDg4NjQpLEJGX0RBVEFNQVRSSVg6QmlnSW50KDEzNDIxNzcyOCksQkZfQVpURUM6QmlnSW50KDI2ODQzNTQ1NiksQkZfTUFYSUNPREU6QmlnSW50KDUzNjg3MDkxMiksQkZfTUlDUk9fUVI6QmlnSW50KDEwNzM3NDE4MjQpLEJGX01JQ1JPX1BERjQxNzpCaWdJbnQoNTI0Mjg4KSxCRl9HUzFfQ09NUE9TSVRFOkJpZ0ludCgyMTQ3NDgzNjQ4KSxCRl9NU0lfQ09ERTpCaWdJbnQoMTA0ODU3NiksQkZfQ09ERV8xMTpCaWdJbnQoMjA5NzE1MiksQkZfVFdPX0RJR0lUX0FERF9PTjpCaWdJbnQoNDE5NDMwNCksQkZfRklWRV9ESUdJVF9BRERfT046QmlnSW50KDgzODg2MDgpLEJGX01BVFJJWF8yNTpCaWdJbnQoNjg3MTk0NzY3MzYpLEJGX1BPU1RBTENPREU6QmlnSW50KDB4M2YwMDAwMDAwMDAwMDAwKSxCRl9OT05TVEFOREFSRF9CQVJDT0RFOkJpZ0ludCg0Mjk0OTY3Mjk2KSxCRl9VU1BTSU5URUxMSUdFTlRNQUlMOkJpZ0ludCg0NTAzNTk5NjI3MzcwNDk2KSxCRl9QT1NUTkVUOkJpZ0ludCg5MDA3MTk5MjU0NzQwOTkyKSxCRl9QTEFORVQ6QmlnSW50KDB4NDAwMDAwMDAwMDAwMDApLEJGX0FVU1RSQUxJQU5QT1NUOkJpZ0ludCgweDgwMDAwMDAwMDAwMDAwKSxCRl9STTRTQ0M6QmlnSW50KDcyMDU3NTk0MDM3OTI3OTQwKSxCRl9LSVg6QmlnSW50KDB4MjAwMDAwMDAwMDAwMDAwKSxCRl9ET1RDT0RFOkJpZ0ludCg4NTg5OTM0NTkyKSxCRl9QSEFSTUFDT0RFX09ORV9UUkFDSzpCaWdJbnQoMTcxNzk4NjkxODQpLEJGX1BIQVJNQUNPREVfVFdPX1RSQUNLOkJpZ0ludCgzNDM1OTczODM2OCksQkZfUEhBUk1BQ09ERTpCaWdJbnQoNTE1Mzk2MDc1NTIpfTt2YXIgQyxTLE4sTDshZnVuY3Rpb24oXyl7X1tfLkVCUlRfU1RBTkRBUkRfUkVTVUxUPTBdPVwiRUJSVF9TVEFOREFSRF9SRVNVTFRcIixfW18uRUJSVF9DQU5ESURBVEVfUkVTVUxUPTFdPVwiRUJSVF9DQU5ESURBVEVfUkVTVUxUXCIsX1tfLkVCUlRfUEFSVElBTF9SRVNVTFQ9Ml09XCJFQlJUX1BBUlRJQUxfUkVTVUxUXCJ9KEN8fChDPXt9KSksZnVuY3Rpb24oXyl7X1tfLlFSRUNMX0VSUk9SX0NPUlJFQ1RJT05fSD0wXT1cIlFSRUNMX0VSUk9SX0NPUlJFQ1RJT05fSFwiLF9bXy5RUkVDTF9FUlJPUl9DT1JSRUNUSU9OX0w9MV09XCJRUkVDTF9FUlJPUl9DT1JSRUNUSU9OX0xcIixfW18uUVJFQ0xfRVJST1JfQ09SUkVDVElPTl9NPTJdPVwiUVJFQ0xfRVJST1JfQ09SUkVDVElPTl9NXCIsX1tfLlFSRUNMX0VSUk9SX0NPUlJFQ1RJT05fUT0zXT1cIlFSRUNMX0VSUk9SX0NPUlJFQ1RJT05fUVwifShTfHwoUz17fSkpLGZ1bmN0aW9uKF8pe19bXy5MTV9BVVRPPTFdPVwiTE1fQVVUT1wiLF9bXy5MTV9DT05ORUNURURfQkxPQ0tTPTJdPVwiTE1fQ09OTkVDVEVEX0JMT0NLU1wiLF9bXy5MTV9TVEFUSVNUSUNTPTRdPVwiTE1fU1RBVElTVElDU1wiLF9bXy5MTV9MSU5FUz04XT1cIkxNX0xJTkVTXCIsX1tfLkxNX1NDQU5fRElSRUNUTFk9MTZdPVwiTE1fU0NBTl9ESVJFQ1RMWVwiLF9bXy5MTV9TVEFUSVNUSUNTX01BUktTPTMyXT1cIkxNX1NUQVRJU1RJQ1NfTUFSS1NcIixfW18uTE1fU1RBVElTVElDU19QT1NUQUxfQ09ERT02NF09XCJMTV9TVEFUSVNUSUNTX1BPU1RBTF9DT0RFXCIsX1tfLkxNX0NFTlRSRT0xMjhdPVwiTE1fQ0VOVFJFXCIsX1tfLkxNX09ORURfRkFTVF9TQ0FOPTI1Nl09XCJMTV9PTkVEX0ZBU1RfU0NBTlwiLF9bXy5MTV9SRVY9LTIxNDc0ODM2NDhdPVwiTE1fUkVWXCIsX1tfLkxNX1NLSVA9MF09XCJMTV9TS0lQXCJ9KE58fChOPXt9KSksZnVuY3Rpb24oXyl7X1tfLkRNX0RJUkVDVF9CSU5BUklaQVRJT049MV09XCJETV9ESVJFQ1RfQklOQVJJWkFUSU9OXCIsX1tfLkRNX1RIUkVTSE9MRF9CSU5BUklaQVRJT049Ml09XCJETV9USFJFU0hPTERfQklOQVJJWkFUSU9OXCIsX1tfLkRNX0dSQVlfRVFVQUxJWkFUSU9OPTRdPVwiRE1fR1JBWV9FUVVBTElaQVRJT05cIixfW18uRE1fU01PT1RISU5HPThdPVwiRE1fU01PT1RISU5HXCIsX1tfLkRNX01PUlBISU5HPTE2XT1cIkRNX01PUlBISU5HXCIsX1tfLkRNX0RFRVBfQU5BTFlTSVM9MzJdPVwiRE1fREVFUF9BTkFMWVNJU1wiLF9bXy5ETV9TSEFSUEVOSU5HPTY0XT1cIkRNX1NIQVJQRU5JTkdcIixfW18uRE1fQkFTRURfT05fTE9DX0JJTj0xMjhdPVwiRE1fQkFTRURfT05fTE9DX0JJTlwiLF9bXy5ETV9TSEFSUEVOSU5HX1NNT09USElORz0yNTZdPVwiRE1fU0hBUlBFTklOR19TTU9PVEhJTkdcIixfW18uRE1fUkVWPS0yMTQ3NDgzNjQ4XT1cIkRNX1JFVlwiLF9bXy5ETV9TS0lQPTBdPVwiRE1fU0tJUFwifShMfHwoTD17fSkpO2V4cG9ydHtPIGFzIEJhcmNvZGVSZWFkZXJNb2R1bGUsaSBhcyBFbnVtQmFyY29kZUZvcm1hdCxMIGFzIEVudW1EZWJsdXJNb2RlLEMgYXMgRW51bUV4dGVuZGVkQmFyY29kZVJlc3VsdFR5cGUsTiBhcyBFbnVtTG9jYWxpemF0aW9uTW9kZSxTIGFzIEVudW1RUkNvZGVFcnJvckNvcnJlY3Rpb25MZXZlbH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/dynamsoft-barcode-reader/dist/dbr.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/dynamsoft-capture-vision-router/dist/cvr.esm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dynamsoft-capture-vision-router/dist/cvr.esm.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CaptureVisionRouter: function() { return /* binding */ CaptureVisionRouter; },\n/* harmony export */   CaptureVisionRouterModule: function() { return /* binding */ CaptureVisionRouterModule; },\n/* harmony export */   CapturedResultReceiver: function() { return /* binding */ CapturedResultReceiver; },\n/* harmony export */   EnumImageSourceState: function() { return /* binding */ EnumImageSourceState; },\n/* harmony export */   EnumPresetTemplate: function() { return /* binding */ EnumPresetTemplate; },\n/* harmony export */   IntermediateResultReceiver: function() { return /* binding */ IntermediateResultReceiver; }\n/* harmony export */ });\n/* harmony import */ var dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dynamsoft-core */ \"(app-pages-browser)/./node_modules/dynamsoft-core/dist/core.esm.js\");\n/*!\n * Dynamsoft JavaScript Library\n * @product Dynamsoft Capture Vision Router JS Edition\n * @website http://www.dynamsoft.com\n * @copyright Copyright 2024, Dynamsoft Corporation\n * @author Dynamsoft\n * @version \"2.4.21\"\n * @fileoverview Dynamsoft JavaScript Library for Capture Vision\n * More info on cvr JS: https://www.dynamsoft.com/capture-vision/docs/web/programming/javascript/api-reference/capture-vision-router/capture-vision-router-module.html\n */\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nconst isPromiseLike = (value) => (value && \"object\" === typeof value && \"function\" === typeof value.then);\nclass MutablePromise extends Promise {\n    get status() { return this._s; }\n    get isPending() { return \"pending\" === this._s; }\n    get isFulfilled() { return \"fulfilled\" === this._s; }\n    get isRejected() { return \"rejected\" === this._s; }\n    get task() { return this._task; }\n    set task(value) {\n        //if(!this.isPending){ return; }\n        this._task = value;\n        let p;\n        if (isPromiseLike(value)) {\n            p = value;\n        }\n        else if (\"function\" === typeof value) {\n            p = new Promise(value);\n        }\n        if (p) {\n            (async () => {\n                try {\n                    const ret = await p;\n                    // make sure task not change\n                    if (value === this._task) {\n                        this.resolve(ret);\n                    }\n                }\n                catch (reason) {\n                    // make sure task not change\n                    if (value === this._task) {\n                        this.reject(reason);\n                    }\n                }\n            })();\n        }\n    }\n    get isEmpty() { return null == this._task; }\n    constructor(executor) {\n        let rs;\n        let rj;\n        const fn = (_rs, _rj) => { rs = _rs; rj = _rj; };\n        super(fn);\n        // walkaround babel which can not extend builtin class\n        // let _this = this;\n        // let then = new Promise(fn).then;\n        // this.then = function(){ then.apply(_this, arguments) } as any;\n        this._s = \"pending\";\n        this.resolve = (value) => {\n            if (this.isPending) {\n                if (isPromiseLike(value)) {\n                    this.task = value;\n                }\n                else {\n                    this._s = \"fulfilled\";\n                    rs(value);\n                }\n            }\n        };\n        this.reject = (reason) => {\n            if (this.isPending) {\n                this._s = \"rejected\";\n                rj(reason);\n            }\n        };\n        this.task = executor;\n    }\n}\n\nclass BufferedItemsManager {\r\n    constructor(cvr) {\r\n        this._cvr = cvr;\r\n    }\r\n    /**\r\n     * Gets the maximum number of buffered items.\r\n     * @returns Returns the maximum number of buffered items.\r\n     */\r\n    async getMaxBufferedItems() {\r\n        return await new Promise((rs, rj) => {\r\n            let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n                if (body.success) {\r\n                    return rs(body.count);\r\n                }\r\n                else {\r\n                    let ex = new Error(body.message);\r\n                    ex.stack = body.stack + '\\n' + ex.stack;\r\n                    return rj(ex);\r\n                }\r\n            };\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n                type: \"cvr_getMaxBufferedItems\",\r\n                id: taskID,\r\n                instanceID: this._cvr._instanceID\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * Sets the maximum number of buffered items.\r\n     * @param count the maximum number of buffered items\r\n     */\r\n    async setMaxBufferedItems(count) {\r\n        return await new Promise((rs, rj) => {\r\n            let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n                if (body.success) {\r\n                    return rs();\r\n                }\r\n                else {\r\n                    let ex = new Error(body.message);\r\n                    ex.stack = body.stack + '\\n' + ex.stack;\r\n                    return rj(ex);\r\n                }\r\n            };\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n                type: \"cvr_setMaxBufferedItems\",\r\n                id: taskID,\r\n                instanceID: this._cvr._instanceID,\r\n                body: {\r\n                    count\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * Gets the buffered character items.\r\n     * @return the buffered character items\r\n     */\r\n    async getBufferedCharacterItemSet() {\r\n        return await new Promise((rs, rj) => {\r\n            let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n                if (body.success) {\r\n                    return rs(body.itemSet);\r\n                }\r\n                else {\r\n                    let ex = new Error(body.message);\r\n                    ex.stack = body.stack + '\\n' + ex.stack;\r\n                    return rj(ex);\r\n                }\r\n            };\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n                type: \"cvr_getBufferedCharacterItemSet\",\r\n                id: taskID,\r\n                instanceID: this._cvr._instanceID\r\n            });\r\n        });\r\n    }\r\n    ;\r\n}\n\nvar irrRegistryState = {\r\n    onTaskResultsReceived: false,\r\n    onTaskResultsReceivedForDce: false,\r\n    // section\r\n    onPredetectedRegionsReceived: false,\r\n    onLocalizedBarcodesReceived: false,\r\n    onDecodedBarcodesReceived: false,\r\n    onLocalizedTextLinesReceived: false,\r\n    onRecognizedTextLinesReceived: false,\r\n    onDetectedQuadsReceived: false,\r\n    onNormalizedImagesReceived: false,\r\n    // stage\r\n    onColourImageUnitReceived: false,\r\n    onScaledDownColourImageUnitReceived: false,\r\n    onGrayscaleImageUnitReceived: false,\r\n    onTransformedGrayscaleImageUnitReceived: false,\r\n    onEnhancedGrayscaleImageUnitReceived: false,\r\n    onBinaryImageUnitReceived: false,\r\n    onTextureDetectionResultUnitReceived: false,\r\n    onTextureRemovedGrayscaleImageUnitReceived: false,\r\n    onTextureRemovedBinaryImageUnitReceived: false,\r\n    onContoursUnitReceived: false,\r\n    onLineSegmentsUnitReceived: false,\r\n    onTextZonesUnitReceived: false,\r\n    onTextRemovedBinaryImageUnitReceived: false,\r\n    onRawTextLinesReceived: false,\r\n    onLongLinesUnitReceived: false,\r\n    onCornersUnitReceived: false,\r\n    onCandidateQuadEdgesUnitReceived: false,\r\n    onCandidateBarcodeZonesUnitReceived: false,\r\n    onScaledUpBarcodeImageUnitReceived: false,\r\n    onDeformationResistedBarcodeImageUnitReceived: false,\r\n    onComplementedBarcodeImageUnitReceived: false,\r\n    onShortLinesUnitReceived: false\r\n};\n\nconst _handleIntermediateResultReceiver = (irr) => {\r\n    for (let irs in irr._irrRegistryState) {\r\n        irr._irrRegistryState[irs] = false;\r\n    }\r\n    for (let receiver of irr._intermediateResultReceiverSet) {\r\n        if (receiver.isDce || receiver.isFilter) {\r\n            irr._irrRegistryState.onTaskResultsReceivedForDce = true;\r\n            continue;\r\n        }\r\n        for (let r in receiver) {\r\n            if (!irr._irrRegistryState[r]) {\r\n                irr._irrRegistryState[r] = !!receiver[r];\r\n            }\r\n        }\r\n    }\r\n};\r\nclass IntermediateResultManager {\r\n    constructor(cvr) {\r\n        this._irrRegistryState = irrRegistryState;\r\n        this._intermediateResultReceiverSet = new Set();\r\n        this._cvr = cvr;\r\n    }\r\n    /**\r\n     * Adds a `IntermediateResultReceiver` object as the receiver of intermediate results.\r\n     * @param receiver The receiver object, of type `IntermediateResultReceiver`.\r\n     */\r\n    async addResultReceiver(receiver) {\r\n        if (typeof receiver !== \"object\")\r\n            throw new Error(`Invalid receiver.`);\r\n        this._intermediateResultReceiverSet.add(receiver);\r\n        _handleIntermediateResultReceiver(this);\r\n        let observedResultUnitTypes = -1;\r\n        let observedTaskMap = {};\r\n        if (!receiver.isDce && !receiver.isFilter) {\r\n            if (!receiver._observedResultUnitTypes || !receiver._observedTaskMap) {\r\n                throw new Error(\"Invalid Intermediate Result Receiver.\");\r\n            }\r\n            observedResultUnitTypes = receiver._observedResultUnitTypes;\r\n            receiver._observedTaskMap.forEach((value, key) => {\r\n                observedTaskMap[key] = value;\r\n            });\r\n            receiver._observedTaskMap.clear();\r\n        }\r\n        return await new Promise((rs, rj) => {\r\n            let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n                if (body.success) {\r\n                    return rs();\r\n                }\r\n                else {\r\n                    let ex = new Error(body.message);\r\n                    ex.stack = body.stack + '\\n' + ex.stack;\r\n                    return rj(ex);\r\n                }\r\n            };\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n                type: \"cvr_setIrrRegistry\",\r\n                id: taskID,\r\n                instanceID: this._cvr._instanceID,\r\n                body: {\r\n                    receiverObj: this._irrRegistryState,\r\n                    observedResultUnitTypes: observedResultUnitTypes.toString(),\r\n                    observedTaskMap\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * Removes the specified `IntermediateResultReceiver` object.\r\n     * @param receiver The receiver object, of type `IntermediateResultReceiver`.\r\n     */\r\n    async removeResultReceiver(receiver) {\r\n        this._intermediateResultReceiverSet.delete(receiver);\r\n        _handleIntermediateResultReceiver(this);\r\n        return await new Promise((rs, rj) => {\r\n            let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n                if (body.success) {\r\n                    return rs();\r\n                }\r\n                else {\r\n                    let ex = new Error(body.message);\r\n                    ex.stack = body.stack + '\\n' + ex.stack;\r\n                    return rj(ex);\r\n                }\r\n            };\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n                type: \"cvr_setIrrRegistry\",\r\n                id: taskID,\r\n                instanceID: this._cvr._instanceID,\r\n                body: {\r\n                    receiverObj: this._irrRegistryState\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * Retrieves the original image data.\r\n     *\r\n     * @returns A promise that resolves when the operation has successfully completed. It provides the original image upon resolution.\r\n     */\r\n    getOriginalImage() {\r\n        return this._cvr._dsImage;\r\n    }\r\n    ;\r\n}\n\nconst bSSR = \"undefined\" == typeof self;\n\nconst curScriptDir = (() => {\n    if (!bSSR && document.currentScript) {\n        let src = document.currentScript.src, idxSearch = src.indexOf(\"?\");\n        if (-1 != idxSearch) src = src.substring(0, idxSearch); else {\n            let idxHash = src.indexOf(\"#\");\n            -1 != idxHash && (src = src.substring(0, idxHash));\n        }\n        return src.substring(0, src.lastIndexOf(\"/\") + 1);\n    }\n    return \"./\";\n})(), getAbsoluteDir = value => {\n    if (null == value && (value = \"./\"), bSSR) ; else {\n        let a = document.createElement(\"a\");\n        a.href = value, value = a.href;\n    }\n    return value.endsWith(\"/\") || (value += \"/\"), value;\n};\n\nvar _a;\r\ndynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.cvr = { version: \"2.4.21\", path: curScriptDir };\r\ndynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.workerAutoResources.cvr = { js: true, wasm: true, deps: [\"license\", \"dip\"] };\r\ndynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapPackageRegister.cvr = {};\r\nconst stdVersion = \"1.4.10\";\r\nif ('string' != typeof dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.std && (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.compareVersion)(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.std.version, stdVersion) < 0) {\r\n    dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.std = { version: stdVersion, path: getAbsoluteDir(curScriptDir + `../../dynamsoft-capture-vision-std@${stdVersion}/dist/`) };\r\n}\r\nconst dipVersion = \"2.4.20\";\r\nif (!dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.dip || 'string' != typeof dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.dip && (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.compareVersion)(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.dip.version, dipVersion) < 0) {\r\n    dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.dip = { version: dipVersion, path: getAbsoluteDir(curScriptDir + `../../dynamsoft-image-processing@${dipVersion}/dist/`) };\r\n}\r\nclass CaptureVisionRouterModule {\r\n    static getVersion() {\r\n        return this._version;\r\n    }\r\n}\r\nCaptureVisionRouterModule._version = `${\"2.4.21\"}(Worker: ${(_a = dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.innerVersions.cvr) === null || _a === void 0 ? void 0 : _a.worker}, Wasm: loading...`;\n\nvar EnumImageSourceState;\r\n(function (EnumImageSourceState) {\r\n    EnumImageSourceState[EnumImageSourceState[\"ISS_BUFFER_EMPTY\"] = 0] = \"ISS_BUFFER_EMPTY\";\r\n    EnumImageSourceState[EnumImageSourceState[\"ISS_EXHAUSTED\"] = 1] = \"ISS_EXHAUSTED\";\r\n})(EnumImageSourceState || (EnumImageSourceState = {}));\n\n({\r\n    /** No intermediate result. */\r\n    IRUT_NULL: BigInt(0),\r\n    /** A full-color image. */\r\n    IRUT_COLOUR_IMAGE: BigInt(1),\r\n    /** A color image that has been scaled down for efficiency. */\r\n    IRUT_SCALED_DOWN_COLOUR_IMAGE: BigInt(1 << 1),\r\n    /** A grayscale image derived from the original input. */\r\n    IRUT_GRAYSCALE_IMAGE: BigInt(1 << 2),\r\n    /** A grayscale image that has undergone transformation. */\r\n    IRUT_TRANSOFORMED_GRAYSCALE_IMAGE: BigInt(1 << 3),\r\n    /** A grayscale image enhanced for further processing. */\r\n    IRUT_ENHANCED_GRAYSCALE_IMAGE: BigInt(1 << 4),\r\n    /** Regions pre-detected as potentially relevant for further analysis. */\r\n    IRUT_PREDETECTED_REGIONS: BigInt(1 << 5),\r\n    /** A binary (black and white) image. */\r\n    IRUT_BINARY_IMAGE: BigInt(1 << 6),\r\n    /** Results from detecting textures within the image. */\r\n    IRUT_TEXTURE_DETECTION_RESULT: BigInt(1 << 7),\r\n    /** A grayscale image with textures removed to enhance subject details like text or barcodes. */\r\n    IRUT_TEXTURE_REMOVED_GRAYSCALE_IMAGE: BigInt(1 << 8),\r\n    /** A binary image with textures removed), useful for clear detection of subjects without background noise. */\r\n    IRUT_TEXTURE_REMOVED_BINARY_IMAGE: BigInt(1 << 9),\r\n    /** Detected contours within the image), which can help in identifying shapes and objects. */\r\n    IRUT_CONTOURS: BigInt(1 << 10),\r\n    /** Detected line segments), useful in structural analysis of the image content. */\r\n    IRUT_LINE_SEGMENTS: BigInt(1 << 11),\r\n    /** Identified text zones), indicating areas with potential textual content. */\r\n    IRUT_TEXT_ZONES: BigInt(1 << 12),\r\n    /** A binary image with text regions removed. */\r\n    IRUT_TEXT_REMOVED_BINARY_IMAGE: BigInt(1 << 13),\r\n    /** Zones identified as potential barcode areas), aiding in focused barcode detection. */\r\n    IRUT_CANDIDATE_BARCODE_ZONES: BigInt(1 << 14),\r\n    /** Barcodes that have been localized but not yet decoded. */\r\n    IRUT_LOCALIZED_BARCODES: BigInt(1 << 15),\r\n    /** Barcode images scaled up for improved readability or decoding accuracy. */\r\n    IRUT_SCALED_UP_BARCODE_IMAGE: BigInt(1 << 16),\r\n    /** Images of barcodes processed to resist deformation and improve decoding success. */\r\n    IRUT_DEFORMATION_RESISTED_BARCODE_IMAGE: BigInt(1 << 17),\r\n    /** Barcode images that have been complemented. */\r\n    IRUT_COMPLEMENTED_BARCODE_IMAGE: BigInt(1 << 18),\r\n    /** Successfully decoded barcodes. */\r\n    IRUT_DECODED_BARCODES: BigInt(1 << 19),\r\n    /** Detected long lines. */\r\n    IRUT_LONG_LINES: BigInt(1 << 20),\r\n    /** Detected corners within the image. */\r\n    IRUT_CORNERS: BigInt(1 << 21),\r\n    /** Candidate edges identified as potential components of quadrilaterals. */\r\n    IRUT_CANDIDATE_QUAD_EDGES: BigInt(1 << 22),\r\n    /** Successfully detected quadrilaterals. */\r\n    IRUT_DETECTED_QUADS: BigInt(1 << 23),\r\n    /** Text lines that have been localized in preparation for recognition. */\r\n    IRUT_LOCALIZED_TEXT_LINES: BigInt(1 << 24),\r\n    /** Successfully recognized text lines. */\r\n    IRUT_RECOGNIZED_TEXT_LINES: BigInt(1 << 25),\r\n    /** Successfully normalized images. */\r\n    IRUT_NORMALIZED_IMAGES: BigInt(1 << 26),\r\n    /** Successfully detected short lines. */\r\n    IRUT_SHORT_LINES: BigInt(1 << 27),\r\n    IRUT_RAW_TEXT_LINES: BigInt(1 << 28),\r\n    /** A mask to select all types of intermediate results. */\r\n    IRUT_ALL: BigInt(\"0xFFFFFFFFFFFFFFFF\")\r\n});\r\nfunction handleResultForDraw(results) {\r\n    const resultsForDraw = {\r\n        barcodeResultItems: [],\r\n        textLineResultItems: [],\r\n        detectedQuadResultItems: [],\r\n        normalizedImageResultItems: [],\r\n        parsedResultItems: []\r\n    };\r\n    results.items.forEach((item) => {\r\n        if (item.type === dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_BARCODE) {\r\n            resultsForDraw.barcodeResultItems.push(item);\r\n        }\r\n        else if (item.type === dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_TEXT_LINE) {\r\n            resultsForDraw.textLineResultItems.push(item);\r\n        }\r\n        else if (item.type === dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_DETECTED_QUAD) {\r\n            resultsForDraw.detectedQuadResultItems.push(item);\r\n        }\r\n        else if (item.type === dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_NORMALIZED_IMAGE) {\r\n            resultsForDraw.normalizedImageResultItems.push(item);\r\n        }\r\n        else if (item.type === dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_PARSED_RESULT) {\r\n            resultsForDraw.parsedResultItems.push(item);\r\n        }\r\n    });\r\n    return resultsForDraw;\r\n}\r\nfunction convertCoordinates(item, compressRate) {\r\n    if (item && item.location) {\r\n        const points = item.location.points;\r\n        for (let point of points) {\r\n            point.x = point.x / compressRate;\r\n            point.y = point.y / compressRate;\r\n        }\r\n        convertCoordinates(item.referencedItem, compressRate);\r\n    }\r\n}\r\nfunction checkIsDisposed(cvr) {\r\n    if (cvr.disposed) {\r\n        throw new Error(`\"CaptureVisionRouter\" instance has been disposed`);\r\n    }\r\n}\n\nvar _CaptureVisionRouter_isa, _CaptureVisionRouter_canvas, _CaptureVisionRouter_promiseStartScan, _CaptureVisionRouter_intermediateResultManager, _CaptureVisionRouter_bufferdItemsManager, _CaptureVisionRouter_resultReceiverSet, _CaptureVisionRouter_isaStateListenerSet, _CaptureVisionRouter_resultFilterSet, _CaptureVisionRouter_compressRate, _CaptureVisionRouter_isScanner, _CaptureVisionRouter_innerUseTag, _CaptureVisionRouter_isDestroyed;\r\nconst _intermediateResultReceiverOfFilter = {\r\n    onTaskResultsReceived: () => { },\r\n    isFilter: true\r\n};\r\nclass CaptureVisionRouter {\r\n    constructor() {\r\n        this.maxCvsSideLength = [\"iPhone\", \"Android\", \"HarmonyOS\"].includes(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.CoreModule.browserInfo.OS) ? 2048 : 4096;\r\n        this._instanceID = undefined;\r\n        this._dsImage = null;\r\n        this._isPauseScan = true;\r\n        this._isOutputOriginalImage = false;\r\n        this._isOpenDetectVerify = false;\r\n        this._isOpenNormalizeVerify = false;\r\n        this._isOpenBarcodeVerify = false;\r\n        this._isOpenLabelVerify = false;\r\n        this._minImageCaptureInterval = 0;\r\n        this._averageProcessintTimeArray = [];\r\n        this._averageFetchImageTimeArray = [];\r\n        this._currentSettings = null;\r\n        this._averageTime = 999;\r\n        _CaptureVisionRouter_isa.set(this, null);\r\n        _CaptureVisionRouter_canvas.set(this, null);\r\n        _CaptureVisionRouter_promiseStartScan.set(this, null);\r\n        _CaptureVisionRouter_intermediateResultManager.set(this, null);\r\n        _CaptureVisionRouter_bufferdItemsManager.set(this, null);\r\n        _CaptureVisionRouter_resultReceiverSet.set(this, new Set());\r\n        _CaptureVisionRouter_isaStateListenerSet.set(this, new Set());\r\n        _CaptureVisionRouter_resultFilterSet.set(this, new Set());\r\n        _CaptureVisionRouter_compressRate.set(this, 0);\r\n        _CaptureVisionRouter_isScanner.set(this, false);\r\n        _CaptureVisionRouter_innerUseTag.set(this, false);\r\n        _CaptureVisionRouter_isDestroyed.set(this, false);\r\n        this._singleFrameModeCallbackBind = this._singleFrameModeCallback.bind(this);\r\n    }\r\n    /**\r\n     * Returns whether the `CaptureVisionRouter` instance has been disposed of.\r\n     *\r\n     * @returns Boolean indicating whether the `CaptureVisionRouter` instance has been disposed of.\r\n     */\r\n    get disposed() {\r\n        return __classPrivateFieldGet(this, _CaptureVisionRouter_isDestroyed, \"f\");\r\n    }\r\n    /**\r\n     * Initializes a new instance of the `CaptureVisionRouter` class.\r\n     *\r\n     * @returns A promise that resolves with the initialized `CaptureVisionRouter` instance.\r\n     */\r\n    static async createInstance() {\r\n        if (!dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapPackageRegister.license) {\r\n            throw Error('Module `license` is not existed.');\r\n        }\r\n        await dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapPackageRegister.license.dynamsoft();\r\n        await (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.loadWasm)([\"cvr\"]);\r\n        const captureVisionRouter = new CaptureVisionRouter();\r\n        const p = new MutablePromise();\r\n        let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n        dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n            var _a;\r\n            if (body.success) {\r\n                captureVisionRouter._instanceID = body.instanceID;\r\n                captureVisionRouter._currentSettings = JSON.parse(body.outputSettings);\r\n                CaptureVisionRouterModule._version = `${\"2.4.21\"}(Worker: ${(_a = dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.innerVersions.cvr) === null || _a === void 0 ? void 0 : _a.worker}, Wasm: ${body.version})`;\r\n                __classPrivateFieldSet(captureVisionRouter, _CaptureVisionRouter_innerUseTag, true, \"f\");\r\n                __classPrivateFieldSet(captureVisionRouter, _CaptureVisionRouter_intermediateResultManager, captureVisionRouter.getIntermediateResultManager(), \"f\");\r\n                __classPrivateFieldSet(captureVisionRouter, _CaptureVisionRouter_innerUseTag, false, \"f\");\r\n                p.resolve(captureVisionRouter);\r\n            }\r\n            else {\r\n                const err = Error(body.message);\r\n                if (body.stack) {\r\n                    err.stack = body.stack;\r\n                }\r\n                p.reject(err);\r\n            }\r\n        };\r\n        dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n            type: 'cvr_createInstance',\r\n            id: taskID,\r\n        });\r\n        return p;\r\n    }\r\n    ;\r\n    async _singleFrameModeCallback(dsImage) {\r\n        for (let receiver of __classPrivateFieldGet(this, _CaptureVisionRouter_resultReceiverSet, \"f\")) {\r\n            this._isOutputOriginalImage && receiver.onOriginalImageResultReceived && receiver.onOriginalImageResultReceived({ imageData: dsImage });\r\n        }\r\n        const copyDsImageData = {\r\n            bytes: new Uint8Array(dsImage.bytes),\r\n            width: dsImage.width,\r\n            height: dsImage.height,\r\n            stride: dsImage.stride,\r\n            format: dsImage.format,\r\n            tag: dsImage.tag\r\n        };\r\n        if (!this._templateName)\r\n            this._templateName = this._currentSettings.CaptureVisionTemplates[0].Name;\r\n        const result = await this.capture(copyDsImageData, this._templateName);\r\n        result.originalImageTag = dsImage.tag;\r\n        for (let receiver of __classPrivateFieldGet(this, _CaptureVisionRouter_resultReceiverSet, \"f\")) {\r\n            if (receiver.isDce) {\r\n                receiver.onCapturedResultReceived(result, {\r\n                    isDetectVerifyOpen: false,\r\n                    isNormalizeVerifyOpen: false,\r\n                    isBarcodeVerifyOpen: false,\r\n                    isLabelVerifyOpen: false,\r\n                });\r\n            }\r\n        }\r\n        const resultCommonPart = {\r\n            originalImageHashId: result.originalImageHashId,\r\n            originalImageTag: result.originalImageTag,\r\n            errorCode: result.errorCode,\r\n            errorString: result.errorString\r\n        };\r\n        for (let receiver of __classPrivateFieldGet(this, _CaptureVisionRouter_resultReceiverSet, \"f\")) {\r\n            receiver.onDecodedBarcodesReceived && result.barcodeResultItems && receiver.onDecodedBarcodesReceived(Object.assign(Object.assign({}, resultCommonPart), { barcodeResultItems: result.barcodeResultItems }));\r\n            receiver.onRecognizedTextLinesReceived && result.textLineResultItems && receiver.onRecognizedTextLinesReceived(Object.assign(Object.assign({}, resultCommonPart), { textLineResultItems: result.textLineResultItems }));\r\n            receiver.onDetectedQuadsReceived && result.detectedQuadResultItems && receiver.onDetectedQuadsReceived(Object.assign(Object.assign({}, resultCommonPart), { detectedQuadResultItems: result.detectedQuadResultItems }));\r\n            receiver.onNormalizedImagesReceived && result.normalizedImageResultItems && receiver.onNormalizedImagesReceived(Object.assign(Object.assign({}, resultCommonPart), { normalizedImageResultItems: result.normalizedImageResultItems }));\r\n            receiver.onParsedResultsReceived && result.parsedResultItems && receiver.onParsedResultsReceived(Object.assign(Object.assign({}, resultCommonPart), { parsedResultItems: result.parsedResultItems }));\r\n            if (receiver.onCapturedResultReceived && !receiver.isDce) {\r\n                if (this._isOutputOriginalImage) {\r\n                    const index = result.items.findIndex((item) => { return item.type === 1; });\r\n                    if (index !== -1) {\r\n                        result.items[index].imageData = dsImage;\r\n                    }\r\n                }\r\n                receiver.onCapturedResultReceived(result);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets up an image source to provide images for continuous processing.\r\n     * @param imageSource The image source which is compliant with the `ImageSourceAdapter` interface.\r\n     */\r\n    setInput(imageSource) {\r\n        checkIsDisposed(this);\r\n        if (!imageSource) {\r\n            __classPrivateFieldSet(this, _CaptureVisionRouter_isa, null, \"f\");\r\n            return;\r\n        }\r\n        __classPrivateFieldSet(this, _CaptureVisionRouter_isa, imageSource, \"f\");\r\n        if (imageSource.isCameraEnhancer) {\r\n            if (__classPrivateFieldGet(this, _CaptureVisionRouter_intermediateResultManager, \"f\")) {\r\n                __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\")._intermediateResultReceiver.isDce = true;\r\n                __classPrivateFieldGet(this, _CaptureVisionRouter_intermediateResultManager, \"f\").addResultReceiver(__classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\")._intermediateResultReceiver);\r\n            }\r\n            const cameraView = __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").getCameraView();\r\n            if (cameraView) {\r\n                const dceCrr = cameraView._capturedResultReceiver;\r\n                dceCrr.isDce = true;\r\n                __classPrivateFieldGet(this, _CaptureVisionRouter_resultReceiverSet, \"f\").add(dceCrr);\r\n            }\r\n            // TODO: think about off.\r\n            //(imageSource as any).on(\"singleFrameAcquired\", this._singleFrameModeCallback);\r\n        }\r\n    }\r\n    ;\r\n    /**\r\n     * Returns the image source object.\r\n     */\r\n    getInput() {\r\n        return __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\");\r\n    }\r\n    ;\r\n    /**\r\n     * Adds or removes listeners for image source state change.\r\n     */\r\n    addImageSourceStateListener(listener) {\r\n        checkIsDisposed(this);\r\n        if (typeof listener !== \"object\")\r\n            return console.warn(`Invalid ISA state listener.`);\r\n        if (!listener || !Object.keys(listener))\r\n            return;\r\n        __classPrivateFieldGet(this, _CaptureVisionRouter_isaStateListenerSet, \"f\").add(listener);\r\n    }\r\n    ;\r\n    removeImageSourceStateListener(listener) {\r\n        checkIsDisposed(this);\r\n        return __classPrivateFieldGet(this, _CaptureVisionRouter_isaStateListenerSet, \"f\").delete(listener);\r\n    }\r\n    /**\r\n     * Adds a `CapturedResultReceiver` object as the receiver of captured results.\r\n     * @param receiver The receiver object, of type `CapturedResultReceiver`.\r\n     */\r\n    addResultReceiver(receiver) {\r\n        checkIsDisposed(this);\r\n        if (typeof receiver !== \"object\")\r\n            throw new Error(`Invalid receiver.`);\r\n        if (!receiver || !Object.keys(receiver).length)\r\n            return;\r\n        __classPrivateFieldGet(this, _CaptureVisionRouter_resultReceiverSet, \"f\").add(receiver);\r\n        this._setCrrRegistry();\r\n    }\r\n    ;\r\n    /**\r\n     * Removes the specified `CapturedResultReceiver` object.\r\n     * @param receiver The receiver object, of type `CapturedResultReceiver`.\r\n     */\r\n    removeResultReceiver(receiver) {\r\n        checkIsDisposed(this);\r\n        __classPrivateFieldGet(this, _CaptureVisionRouter_resultReceiverSet, \"f\").delete(receiver);\r\n        this._setCrrRegistry();\r\n    }\r\n    async _setCrrRegistry() {\r\n        const receiver = {\r\n            onCapturedResultReceived: false,\r\n            onDecodedBarcodesReceived: false,\r\n            onRecognizedTextLinesReceived: false,\r\n            onDetectedQuadsReceived: false,\r\n            onNormalizedImagesReceived: false,\r\n            onParsedResultsReceived: false\r\n        };\r\n        for (let r of __classPrivateFieldGet(this, _CaptureVisionRouter_resultReceiverSet, \"f\")) {\r\n            if (r.isDce)\r\n                continue;\r\n            receiver.onCapturedResultReceived = !!r[\"onCapturedResultReceived\"];\r\n            receiver.onDecodedBarcodesReceived = !!r[\"onDecodedBarcodesReceived\"];\r\n            receiver.onRecognizedTextLinesReceived = !!r[\"onRecognizedTextLinesReceived\"];\r\n            receiver.onDetectedQuadsReceived = !!r[\"onDetectedQuadsReceived\"];\r\n            receiver.onNormalizedImagesReceived = !!r[\"onNormalizedImagesReceived\"];\r\n            receiver.onParsedResultsReceived = !!r[\"onParsedResultsReceived\"];\r\n        }\r\n        const p = new MutablePromise();\r\n        let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n        dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n            if (body.success) {\r\n                p.resolve();\r\n            }\r\n            else {\r\n                let ex = new Error(body.message);\r\n                ex.stack = body.stack + '\\n' + ex.stack;\r\n                p.reject();\r\n            }\r\n        };\r\n        dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n            type: \"cvr_setCrrRegistry\",\r\n            id: taskID,\r\n            instanceID: this._instanceID,\r\n            body: {\r\n                receiver: JSON.stringify(receiver)\r\n            }\r\n        });\r\n        return p;\r\n    }\r\n    /**\r\n     * Adds a `MultiFrameResultCrossFilter` object to filter non-essential results.\r\n     * @param filter The filter object, of type `MultiFrameResultCrossFilter`.\r\n     *\r\n     * @returns A promise that resolves when the operation has successfully completed. It does not provide any value upon resolution.\r\n     */\r\n    async addResultFilter(filter) {\r\n        checkIsDisposed(this);\r\n        if (!filter || typeof filter !== \"object\" || !Object.keys(filter).length) {\r\n            return console.warn(`Invalid filter.`);\r\n        }\r\n        __classPrivateFieldGet(this, _CaptureVisionRouter_resultFilterSet, \"f\").add(filter);\r\n        // When cvr.addResultFilter is called, this method will automatically be invoked to batch update the filter statuses that were set before calling addResultFilter.\r\n        filter._dynamsoft();\r\n        await this._handleFilterUpdate();\r\n    }\r\n    ;\r\n    /**\r\n     * Removes the specified `MultiFrameResultCrossFilter` object.\r\n     * @param filter The filter object, of type `MultiFrameResultCrossFilter`.\r\n     *\r\n     * @returns A promise that resolves when the operation has successfully completed. It does not provide any value upon resolution.\r\n     */\r\n    async removeResultFilter(filter) {\r\n        checkIsDisposed(this);\r\n        __classPrivateFieldGet(this, _CaptureVisionRouter_resultFilterSet, \"f\").delete(filter);\r\n        await this._handleFilterUpdate();\r\n    }\r\n    async _handleFilterUpdate() {\r\n        /**\r\n         * Each time a \"filter\" is added or removed, the \"filter set\" will be re-traversed,\r\n         * and _intermediateResultReceiverOfFilter will be added when necessary.\r\n         * This ensures that _intermediateResultReceiverOfFilter is not left in the \"filter set\" when the \"filter set\" is empty or when no filter in the \"filter set\" has isLatestOverlappingEnabled set to true.\r\n         */\r\n        __classPrivateFieldGet(this, _CaptureVisionRouter_intermediateResultManager, \"f\").removeResultReceiver(_intermediateResultReceiverOfFilter);\r\n        if (__classPrivateFieldGet(this, _CaptureVisionRouter_resultFilterSet, \"f\").size === 0) {\r\n            this._isOpenBarcodeVerify = false;\r\n            this._isOpenLabelVerify = false;\r\n            this._isOpenDetectVerify = false;\r\n            this._isOpenNormalizeVerify = false;\r\n            const _verificationEnabled = {\r\n                [dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_BARCODE]: false,\r\n                [dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_TEXT_LINE]: false,\r\n                [dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_DETECTED_QUAD]: false,\r\n                [dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_NORMALIZED_IMAGE]: false\r\n            };\r\n            const _duplicateFilterEnabled = {\r\n                [dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_BARCODE]: false,\r\n                [dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_TEXT_LINE]: false,\r\n                [dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_DETECTED_QUAD]: false,\r\n                [dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_NORMALIZED_IMAGE]: false\r\n            };\r\n            await _enableResultCrossVerification(this, _verificationEnabled);\r\n            await _enableResultDeduplication(this, _duplicateFilterEnabled);\r\n            return;\r\n        }\r\n        for (let filter of __classPrivateFieldGet(this, _CaptureVisionRouter_resultFilterSet, \"f\")) {\r\n            this._isOpenBarcodeVerify = filter.isResultCrossVerificationEnabled(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_BARCODE);\r\n            this._isOpenLabelVerify = filter.isResultCrossVerificationEnabled(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_TEXT_LINE);\r\n            this._isOpenDetectVerify = filter.isResultCrossVerificationEnabled(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_DETECTED_QUAD);\r\n            this._isOpenNormalizeVerify = filter.isResultCrossVerificationEnabled(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_NORMALIZED_IMAGE);\r\n            if (filter.isLatestOverlappingEnabled(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_BARCODE)) {\r\n                const _isExist = [...__classPrivateFieldGet(this, _CaptureVisionRouter_intermediateResultManager, \"f\")._intermediateResultReceiverSet.values()].find((receiver) => { return receiver.isFilter; });\r\n                if (!_isExist) {\r\n                    __classPrivateFieldGet(this, _CaptureVisionRouter_intermediateResultManager, \"f\").addResultReceiver(_intermediateResultReceiverOfFilter);\r\n                }\r\n            }\r\n            await _enableResultCrossVerification(this, filter.verificationEnabled);\r\n            await _enableResultDeduplication(this, filter.duplicateFilterEnabled);\r\n            await _setDuplicateForgetTime(this, filter.duplicateForgetTime);\r\n        }\r\n    }\r\n    /**\r\n     * Initiates a capturing process based on a specified template. This process is repeated for each image fetched from the source.\r\n     * @param templateName [Optional] Specifies a \"CaptureVisionTemplate\" to use.\r\n     *\r\n     * @returns A promise that resolves when the capturing process has successfully started. It does not provide any value upon resolution.\r\n     */\r\n    async startCapturing(templateName) {\r\n        var _a, _b;\r\n        checkIsDisposed(this);\r\n        if (!this._isPauseScan)\r\n            return;\r\n        if (!__classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\"))\r\n            throw new Error(`'ImageSourceAdapter' is not set. call 'setInput' before 'startCapturing'`);\r\n        if (!templateName)\r\n            templateName = this._currentSettings.CaptureVisionTemplates[0].Name;\r\n        const tasks = await this.containsTask(templateName);\r\n        await (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.loadWasm)(tasks);\r\n        /*\r\n         * Why do we need to re-add an existing \"filter\" when calling \"startCapturing\"?\r\n         * Because there may be a situation where the corresponding wasm module has not been loaded when adding \"filter\",\r\n         * so after checking the required wasm module in \"startCapturing\", we will add \"filter\" again to ensure that \"filter\" takes effect in wasm.\r\n         *\r\n         * Why not check for the required wasm when adding the \"filter\"?\r\n         * Because each result type has a default value, we cannot know which wasm modules are actually needed through the passed \"filter\"\r\n         *\r\n         * This part of the logic has room for optimization. will do.\r\n         **/\r\n        for (let filter of __classPrivateFieldGet(this, _CaptureVisionRouter_resultFilterSet, \"f\")) {\r\n            await this.addResultFilter(filter);\r\n        }\r\n        if (tasks.includes(\"dlr\") && !((_a = dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapPackageRegister.dlr) === null || _a === void 0 ? void 0 : _a.bLoadConfusableCharsData)) {\r\n            const _engineResourcePaths = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.handleEngineResourcePaths)(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.CoreModule.engineResourcePaths, dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths);\r\n            await ((_b = dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapPackageRegister.dlr) === null || _b === void 0 ? void 0 : _b.loadRecognitionData(\"ConfusableChars\", _engineResourcePaths.dlr));\r\n        }\r\n        if (__classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").isCameraEnhancer) {\r\n            if (tasks.includes(\"ddn\")) {\r\n                __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").setPixelFormat(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumImagePixelFormat.IPF_ABGR_8888);\r\n            }\r\n            else {\r\n                __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").setPixelFormat(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumImagePixelFormat.IPF_GRAYSCALED);\r\n            }\r\n        }\r\n        if (__classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").singleFrameMode !== undefined && __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").singleFrameMode !== \"disabled\") {\r\n            this._templateName = templateName;\r\n            __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").on(\"singleFrameAcquired\", this._singleFrameModeCallbackBind);\r\n            return;\r\n        }\r\n        const colourChannelUsageType = __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").getColourChannelUsageType();\r\n        if (colourChannelUsageType === dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumColourChannelUsageType.CCUT_AUTO) {\r\n            __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").setColourChannelUsageType(tasks.includes(\"ddn\") ?\r\n                dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumColourChannelUsageType.CCUT_FULL_CHANNEL\r\n                :\r\n                    dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumColourChannelUsageType.CCUT_Y_CHANNEL_ONLY);\r\n        }\r\n        if (__classPrivateFieldGet(this, _CaptureVisionRouter_promiseStartScan, \"f\") && __classPrivateFieldGet(this, _CaptureVisionRouter_promiseStartScan, \"f\").isPending)\r\n            return __classPrivateFieldGet(this, _CaptureVisionRouter_promiseStartScan, \"f\");\r\n        __classPrivateFieldSet(this, _CaptureVisionRouter_promiseStartScan, new MutablePromise((rs, rj) => {\r\n            if (this.disposed)\r\n                return;\r\n            let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n                if (!__classPrivateFieldGet(this, _CaptureVisionRouter_promiseStartScan, \"f\") || __classPrivateFieldGet(this, _CaptureVisionRouter_promiseStartScan, \"f\").isFulfilled)\r\n                    return;\r\n                if (body.success) {\r\n                    this._isPauseScan = false;\r\n                    this._isOutputOriginalImage = body.isOutputOriginalImage;\r\n                    this._loopReadVideoTimeoutId && clearTimeout(this._loopReadVideoTimeoutId);\r\n                    this._loopReadVideoTimeoutId = setTimeout(async () => {\r\n                        if (this._minImageCaptureInterval !== -1) {\r\n                            __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").startFetching();\r\n                        }\r\n                        this._loopReadVideo(templateName);\r\n                        // try {\r\n                        //   await this._loopReadVideo(templateName);\r\n                        // } catch (ex) {\r\n                        //   rj(ex);\r\n                        // }\r\n                        rs();\r\n                    }, 0);\r\n                }\r\n                else {\r\n                    let ex = new Error(body.message);\r\n                    ex.stack = body.stack + '\\n' + ex.stack;\r\n                    return rj(ex);\r\n                }\r\n            };\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n                type: \"cvr_startCapturing\",\r\n                id: taskID,\r\n                instanceID: this._instanceID,\r\n                body: { templateName }\r\n            });\r\n        }), \"f\");\r\n        return await __classPrivateFieldGet(this, _CaptureVisionRouter_promiseStartScan, \"f\");\r\n    }\r\n    /**\r\n     * Stops the capturing process.\r\n     */\r\n    stopCapturing() {\r\n        checkIsDisposed(this);\r\n        if (!__classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\"))\r\n            return;\r\n        if (__classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").isCameraEnhancer) {\r\n            if (__classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").singleFrameMode !== undefined && __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").singleFrameMode !== \"disabled\") {\r\n                __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").off(\"singleFrameAcquired\", this._singleFrameModeCallbackBind);\r\n                return;\r\n            }\r\n        }\r\n        _clearVerifyList(this);\r\n        __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").stopFetching();\r\n        this._averageProcessintTimeArray = [];\r\n        this._averageTime = 999;\r\n        this._isPauseScan = true;\r\n        __classPrivateFieldSet(this, _CaptureVisionRouter_promiseStartScan, null, \"f\");\r\n        __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").setColourChannelUsageType(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumColourChannelUsageType.CCUT_AUTO);\r\n    }\r\n    async containsTask(templateName) {\r\n        checkIsDisposed(this);\r\n        return await new Promise((rs, rj) => {\r\n            let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n                if (body.success) {\r\n                    return rs(JSON.parse(body.tasks));\r\n                }\r\n                else {\r\n                    let ex = new Error(body.message);\r\n                    ex.stack = body.stack + '\\n' + ex.stack;\r\n                    return rj(ex);\r\n                }\r\n            };\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n                type: \"cvr_containsTask\",\r\n                id: taskID,\r\n                instanceID: this._instanceID,\r\n                body: {\r\n                    templateName\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Video stream capture, recursive call, loop frame capture\r\n     */\r\n    async _loopReadVideo(templateName) {\r\n        if ((this.disposed || this._isPauseScan)) {\r\n            return;\r\n        }\r\n        __classPrivateFieldSet(this, _CaptureVisionRouter_isScanner, true, \"f\");\r\n        if (__classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").isBufferEmpty()) {\r\n            if (__classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").hasNextImageToFetch()) {\r\n                for (let listener of __classPrivateFieldGet(this, _CaptureVisionRouter_isaStateListenerSet, \"f\")) {\r\n                    listener.onImageSourceStateReceived && listener.onImageSourceStateReceived(EnumImageSourceState.ISS_BUFFER_EMPTY);\r\n                }\r\n            }\r\n            else if (!(__classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").hasNextImageToFetch())) {\r\n                for (let listener of __classPrivateFieldGet(this, _CaptureVisionRouter_isaStateListenerSet, \"f\")) {\r\n                    listener.onImageSourceStateReceived && listener.onImageSourceStateReceived(EnumImageSourceState.ISS_EXHAUSTED);\r\n                }\r\n            }\r\n        }\r\n        if (this._minImageCaptureInterval === -1 || __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").isBufferEmpty()) {\r\n            try {\r\n                if (__classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").isBufferEmpty() && CaptureVisionRouter._onLog)\r\n                    CaptureVisionRouter._onLog(`buffer is empty so fetch image`);\r\n                if (CaptureVisionRouter._onLog) {\r\n                    CaptureVisionRouter._onLog(`DCE: start fetching a frame: ${Date.now()}`);\r\n                }\r\n                this._dsImage = __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").fetchImage();\r\n                if (CaptureVisionRouter._onLog) {\r\n                    CaptureVisionRouter._onLog(`DCE: finish fetching a frame: ${Date.now()}`);\r\n                }\r\n                __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").setImageFetchInterval(this._averageTime);\r\n            }\r\n            catch (e) {\r\n                this._reRunCurrnetFunc(templateName);\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").setImageFetchInterval(this._averageTime - (this._dsImage && this._dsImage.tag ? this._dsImage.tag.timeSpent : 0));\r\n            this._dsImage = __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").getImage();\r\n            if (this._dsImage.tag) {\r\n                if (Date.now() - this._dsImage.tag.timeStamp > 200) {\r\n                    this._reRunCurrnetFunc(templateName);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        if (!this._dsImage) {\r\n            this._reRunCurrnetFunc(templateName);\r\n            return;\r\n        }\r\n        for (let receiver of __classPrivateFieldGet(this, _CaptureVisionRouter_resultReceiverSet, \"f\")) {\r\n            this._isOutputOriginalImage && receiver.onOriginalImageResultReceived && receiver.onOriginalImageResultReceived({ imageData: this._dsImage });\r\n        }\r\n        // capture\r\n        // try {\r\n        //   const captureStartTime = Date.now();\r\n        //   const result = await this._captureDsimage(this._dsImage, templateName);\r\n        //   if (CaptureVisionRouter._onLog) CaptureVisionRouter._onLog(`no js handle time: ${Date.now() - captureStartTime}`);\r\n        //   if (this._isPauseScan) {\r\n        //     this._reRunCurrnetFunc(templateName);\r\n        //     return;\r\n        //   }\r\n        //   (result as any).originalImageTag = this._dsImage.tag ? this._dsImage.tag : null;\r\n        //   const resultCommonPart = {\r\n        //     originalImageHashId: result.originalImageHashId,\r\n        //     originalImageTag: result.originalImageTag,\r\n        //     errorCode: result.errorCode,\r\n        //     errorString: result.errorString\r\n        //   }\r\n        //   for (let receiver of this.#resultReceiverSet) {\r\n        //     if ((receiver as any).isDce) {\r\n        //       const drawTime = Date.now();\r\n        //       (receiver as any).onCapturedResultReceived(result, {\r\n        //         isDetectVerifyOpen: this._isOpenDetectVerify,\r\n        //         isNormalizeVerifyOpen: this._isOpenNormalizeVerify,\r\n        //         isBarcodeVerifyOpen: this._isOpenBarcodeVerify,\r\n        //         isLabelVerifyOpen: this._isOpenLabelVerify,\r\n        //       });\r\n        //       if (CaptureVisionRouter._onLog) {\r\n        //         const time = Date.now() - drawTime;\r\n        //         if (time > 10) CaptureVisionRouter._onLog(`draw result time: ${time}`)\r\n        //       };\r\n        //     }\r\n        //     receiver.onDecodedBarcodesReceived && result.barcodeResultItems && receiver.onDecodedBarcodesReceived({\r\n        //       ...resultCommonPart,\r\n        //       barcodeResultItems: result.barcodeResultItems.filter((item: any) => { return !item.isFilter })\r\n        //     } as DecodedBarcodesResult);\r\n        //     receiver.onRecognizedTextLinesReceived && result.textLineResultItems && receiver.onRecognizedTextLinesReceived({\r\n        //       ...resultCommonPart,\r\n        //       textLineResultItems: result.textLineResultItems.filter((item: any) => { return !item.isFilter })\r\n        //     } as RecognizedTextLinesResult);\r\n        //     receiver.onDetectedQuadsReceived && result.detectedQuadResultItems && receiver.onDetectedQuadsReceived({\r\n        //       ...resultCommonPart,\r\n        //       detectedQuadResultItems: result.detectedQuadResultItems.filter((item: any) => { return !item.isFilter })\r\n        //     } as DetectedQuadsResult);\r\n        //     receiver.onNormalizedImagesReceived && result.normalizedImageResultItems && receiver.onNormalizedImagesReceived({\r\n        //       ...resultCommonPart,\r\n        //       normalizedImageResultItems: result.normalizedImageResultItems.filter((item: any) => { return !item.isFilter })\r\n        //     } as NormalizedImagesResult);\r\n        //     receiver.onParsedResultsReceived && result.parsedResultItems && receiver.onParsedResultsReceived({\r\n        //       ...resultCommonPart,\r\n        //       parsedResultItems: result.parsedResultItems.filter((item: any) => { return !item.isFilter })\r\n        //     } as ParsedResult);\r\n        //     if (receiver.onCapturedResultReceived && !(receiver as any).isDce) {\r\n        //       (result as any).items = result.items.filter((item: any) => { return !item.isFilter });\r\n        //       if ((result as any).barcodeResultItems) (result as any).barcodeResultItems = result.barcodeResultItems.filter((item: any) => { return !item.isFilter });\r\n        //       if ((result as any).textLineResultItems) (result as any).textLineResultItems = result.textLineResultItems.filter((item: any) => { return !item.isFilter });\r\n        //       if ((result as any).detectedQuadResultItems) (result as any).detectedQuadResultItems = result.detectedQuadResultItems.filter((item: any) => { return !item.isFilter });\r\n        //       if ((result as any).normalizedImageResultItems) (result as any).normalizedImageResultItems = result.normalizedImageResultItems.filter((item: any) => { return !item.isFilter });\r\n        //       if ((result as any).parsedResultItems) (result as any).parsedResultItems = result.parsedResultItems.filter((item: any) => { return !item.isFilter });\r\n        //       receiver.onCapturedResultReceived(result);\r\n        //     }\r\n        //   }\r\n        //   const fetchImageCalculateStartTime = Date.now();\r\n        //   if (this._minImageCaptureInterval > -1) {\r\n        //     if (this._averageProcessintTimeArray.length === 5) this._averageProcessintTimeArray.shift();\r\n        //     if (this._averageFetchImageTimeArray.length === 5) this._averageFetchImageTimeArray.shift();\r\n        //     this._averageProcessintTimeArray.push(Date.now() - captureStartTime);\r\n        //     //this._averageTime = this._averageProcessintTimeArray.reduce((time, value) => time + value, 0) / this._averageProcessintTimeArray.length;\r\n        //     this._averageFetchImageTimeArray.push((this._dsImage && this._dsImage.tag ? (this._dsImage.tag as any).timeSpent : 0));\r\n        //     this._averageTime = Math.min(...this._averageProcessintTimeArray) - Math.max(...this._averageFetchImageTimeArray);\r\n        //     this._averageTime = this._averageTime > 0 ? this._averageTime : 0;\r\n        //     if (CaptureVisionRouter._onLog) {\r\n        //       CaptureVisionRouter._onLog(`minImageCaptureInterval: ${this._minImageCaptureInterval}`);\r\n        //       CaptureVisionRouter._onLog(`averageProcessintTimeArray: ${this._averageProcessintTimeArray}`);\r\n        //       CaptureVisionRouter._onLog(`averageFetchImageTimeArray: ${this._averageFetchImageTimeArray}`);\r\n        //       CaptureVisionRouter._onLog(`averageTime: ${this._averageTime}`);\r\n        //     };\r\n        //   }\r\n        //   if (CaptureVisionRouter._onLog) {\r\n        //     const time = Date.now() - fetchImageCalculateStartTime;\r\n        //     if (time > 10) CaptureVisionRouter._onLog(`fetch image calculate time: ${time}`)\r\n        //   };\r\n        //   if (CaptureVisionRouter._onLog) CaptureVisionRouter._onLog(`time finish decode: ${Date.now()}`)\r\n        //   if (CaptureVisionRouter._onLog) CaptureVisionRouter._onLog(`main time: ${Date.now() - captureStartTime}`);\r\n        //   if (CaptureVisionRouter._onLog) CaptureVisionRouter._onLog(\"====================================================\");\r\n        //   this._loopReadVideoTimeoutId && clearTimeout(this._loopReadVideoTimeoutId);\r\n        //   if (this._minImageCaptureInterval > 0 && this._minImageCaptureInterval >= this._averageTime) {\r\n        //     this._loopReadVideoTimeoutId = setTimeout(() => {\r\n        //       this._loopReadVideo(templateName);\r\n        //     }, this._minImageCaptureInterval - this._averageTime);\r\n        //   } else {\r\n        //     this._loopReadVideoTimeoutId = setTimeout(() => {\r\n        //       this._loopReadVideo(templateName);\r\n        //     }, Math.max(this._minImageCaptureInterval, 0));\r\n        //   }\r\n        // } catch (ex) {\r\n        //   this.#isa.stopFetching();\r\n        //   this._loopReadVideoTimeoutId && clearTimeout(this._loopReadVideoTimeoutId);\r\n        //   this._loopReadVideoTimeoutId = setTimeout(() => {\r\n        //     this.#isa.startFetching();\r\n        //     this._loopReadVideo(templateName);\r\n        //   }, Math.max(this._minImageCaptureInterval, 1000));\r\n        //   if (!(ex.message === 'platform error')) {\r\n        //     throw ex;\r\n        //   }\r\n        // }\r\n        const captureStartTime = Date.now();\r\n        this._captureDsimage(this._dsImage, templateName).then(async (result) => {\r\n            if (CaptureVisionRouter._onLog)\r\n                CaptureVisionRouter._onLog(`no js handle time: ${Date.now() - captureStartTime}`);\r\n            if (this._isPauseScan) {\r\n                this._reRunCurrnetFunc(templateName);\r\n                return;\r\n            }\r\n            result.originalImageTag = this._dsImage.tag ? this._dsImage.tag : null;\r\n            const resultCommonPart = {\r\n                originalImageHashId: result.originalImageHashId,\r\n                originalImageTag: result.originalImageTag,\r\n                errorCode: result.errorCode,\r\n                errorString: result.errorString\r\n            };\r\n            for (let receiver of __classPrivateFieldGet(this, _CaptureVisionRouter_resultReceiverSet, \"f\")) {\r\n                if (receiver.isDce) {\r\n                    const drawTime = Date.now();\r\n                    receiver.onCapturedResultReceived(result, {\r\n                        isDetectVerifyOpen: this._isOpenDetectVerify,\r\n                        isNormalizeVerifyOpen: this._isOpenNormalizeVerify,\r\n                        isBarcodeVerifyOpen: this._isOpenBarcodeVerify,\r\n                        isLabelVerifyOpen: this._isOpenLabelVerify,\r\n                    });\r\n                    if (CaptureVisionRouter._onLog) {\r\n                        const time = Date.now() - drawTime;\r\n                        if (time > 10)\r\n                            CaptureVisionRouter._onLog(`draw result time: ${time}`);\r\n                    }\r\n                }\r\n                receiver.onDecodedBarcodesReceived && result.barcodeResultItems && receiver.onDecodedBarcodesReceived(Object.assign(Object.assign({}, resultCommonPart), { barcodeResultItems: result.barcodeResultItems.filter((item) => { return !item.isFilter; }) }));\r\n                receiver.onRecognizedTextLinesReceived && result.textLineResultItems && receiver.onRecognizedTextLinesReceived(Object.assign(Object.assign({}, resultCommonPart), { textLineResultItems: result.textLineResultItems.filter((item) => { return !item.isFilter; }) }));\r\n                receiver.onDetectedQuadsReceived && result.detectedQuadResultItems && receiver.onDetectedQuadsReceived(Object.assign(Object.assign({}, resultCommonPart), { detectedQuadResultItems: result.detectedQuadResultItems.filter((item) => { return !item.isFilter; }) }));\r\n                receiver.onNormalizedImagesReceived && result.normalizedImageResultItems && receiver.onNormalizedImagesReceived(Object.assign(Object.assign({}, resultCommonPart), { normalizedImageResultItems: result.normalizedImageResultItems.filter((item) => { return !item.isFilter; }) }));\r\n                receiver.onParsedResultsReceived && result.parsedResultItems && receiver.onParsedResultsReceived(Object.assign(Object.assign({}, resultCommonPart), { parsedResultItems: result.parsedResultItems.filter((item) => { return !item.isFilter; }) }));\r\n                if (receiver.onCapturedResultReceived && !receiver.isDce) {\r\n                    result.items = result.items.filter((item) => { return !item.isFilter; });\r\n                    if (result.barcodeResultItems)\r\n                        result.barcodeResultItems = result.barcodeResultItems.filter((item) => { return !item.isFilter; });\r\n                    if (result.textLineResultItems)\r\n                        result.textLineResultItems = result.textLineResultItems.filter((item) => { return !item.isFilter; });\r\n                    if (result.detectedQuadResultItems)\r\n                        result.detectedQuadResultItems = result.detectedQuadResultItems.filter((item) => { return !item.isFilter; });\r\n                    if (result.normalizedImageResultItems)\r\n                        result.normalizedImageResultItems = result.normalizedImageResultItems.filter((item) => { return !item.isFilter; });\r\n                    if (result.parsedResultItems)\r\n                        result.parsedResultItems = result.parsedResultItems.filter((item) => { return !item.isFilter; });\r\n                    receiver.onCapturedResultReceived(result);\r\n                }\r\n            }\r\n            const fetchImageCalculateStartTime = Date.now();\r\n            if (this._minImageCaptureInterval > -1) {\r\n                if (this._averageProcessintTimeArray.length === 5)\r\n                    this._averageProcessintTimeArray.shift();\r\n                if (this._averageFetchImageTimeArray.length === 5)\r\n                    this._averageFetchImageTimeArray.shift();\r\n                this._averageProcessintTimeArray.push(Date.now() - captureStartTime);\r\n                //this._averageTime = this._averageProcessintTimeArray.reduce((time, value) => time + value, 0) / this._averageProcessintTimeArray.length;\r\n                this._averageFetchImageTimeArray.push((this._dsImage && this._dsImage.tag ? this._dsImage.tag.timeSpent : 0));\r\n                this._averageTime = Math.min(...this._averageProcessintTimeArray) - Math.max(...this._averageFetchImageTimeArray);\r\n                this._averageTime = this._averageTime > 0 ? this._averageTime : 0;\r\n                if (CaptureVisionRouter._onLog) {\r\n                    CaptureVisionRouter._onLog(`minImageCaptureInterval: ${this._minImageCaptureInterval}`);\r\n                    CaptureVisionRouter._onLog(`averageProcessintTimeArray: ${this._averageProcessintTimeArray}`);\r\n                    CaptureVisionRouter._onLog(`averageFetchImageTimeArray: ${this._averageFetchImageTimeArray}`);\r\n                    CaptureVisionRouter._onLog(`averageTime: ${this._averageTime}`);\r\n                }\r\n            }\r\n            if (CaptureVisionRouter._onLog) {\r\n                const time = Date.now() - fetchImageCalculateStartTime;\r\n                if (time > 10)\r\n                    CaptureVisionRouter._onLog(`fetch image calculate time: ${time}`);\r\n            }\r\n            if (CaptureVisionRouter._onLog)\r\n                CaptureVisionRouter._onLog(`time finish decode: ${Date.now()}`);\r\n            if (CaptureVisionRouter._onLog)\r\n                CaptureVisionRouter._onLog(`main time: ${Date.now() - captureStartTime}`);\r\n            if (CaptureVisionRouter._onLog)\r\n                CaptureVisionRouter._onLog(\"====================================================\");\r\n            this._loopReadVideoTimeoutId && clearTimeout(this._loopReadVideoTimeoutId);\r\n            if (this._minImageCaptureInterval > 0 && this._minImageCaptureInterval >= this._averageTime) {\r\n                this._loopReadVideoTimeoutId = setTimeout(() => {\r\n                    this._loopReadVideo(templateName);\r\n                }, this._minImageCaptureInterval - this._averageTime);\r\n            }\r\n            else {\r\n                this._loopReadVideoTimeoutId = setTimeout(() => {\r\n                    this._loopReadVideo(templateName);\r\n                }, Math.max(this._minImageCaptureInterval, 0));\r\n            }\r\n        }).catch((ex) => {\r\n            __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").stopFetching();\r\n            if (ex.errorCode && ex.errorCode === 0) {\r\n                this._loopReadVideoTimeoutId && clearTimeout(this._loopReadVideoTimeoutId);\r\n                this._loopReadVideoTimeoutId = setTimeout(() => {\r\n                    __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\").startFetching();\r\n                    this._loopReadVideo(templateName);\r\n                }, Math.max(this._minImageCaptureInterval, 1000));\r\n            }\r\n            if (!(ex.message === 'platform error')) {\r\n                setTimeout(() => { throw ex; }, 0);\r\n            }\r\n        });\r\n    }\r\n    _reRunCurrnetFunc(templateName) {\r\n        this._loopReadVideoTimeoutId && clearTimeout(this._loopReadVideoTimeoutId);\r\n        this._loopReadVideoTimeoutId = setTimeout(() => {\r\n            this._loopReadVideo(templateName);\r\n        }, 0);\r\n    }\r\n    /**\r\n     * Processes a single image or a file containing a single image to derive important information.\r\n     * @param imageOrFile Specifies the image or file to be processed. The following data types are accepted: `Blob`, `HTMLImageElement`, `HTMLCanvasElement`, `HTMLVideoElement`, `DSImageData`, `string`.\r\n     * @param templateName [Optional] Specifies a \"CaptureVisionTemplate\" to use.\r\n     *\r\n     * @returns A promise that resolves with a `CapturedResult` object which contains the derived information from the image processed.\r\n     */\r\n    async capture(imageOrFile, templateName) {\r\n        var _a, _b;\r\n        checkIsDisposed(this);\r\n        if (!templateName)\r\n            templateName = this._currentSettings.CaptureVisionTemplates[0].Name;\r\n        const tasks = await this.containsTask(templateName);\r\n        await (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.loadWasm)(tasks);\r\n        if (tasks.includes(\"dlr\") && !((_a = dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapPackageRegister.dlr) === null || _a === void 0 ? void 0 : _a.bLoadConfusableCharsData)) {\r\n            const _engineResourcePaths = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.handleEngineResourcePaths)(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.CoreModule.engineResourcePaths, dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths);\r\n            await ((_b = dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapPackageRegister.dlr) === null || _b === void 0 ? void 0 : _b.loadRecognitionData(\"ConfusableChars\", _engineResourcePaths.dlr));\r\n        }\r\n        let result;\r\n        __classPrivateFieldSet(this, _CaptureVisionRouter_isScanner, false, \"f\");\r\n        if ((0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__._isDSImageData)(imageOrFile)) {\r\n            result = await this._captureDsimage(imageOrFile, templateName);\r\n        }\r\n        else if (typeof imageOrFile === \"string\") {\r\n            if (imageOrFile.substring(0, 11) == \"data:image/\") {\r\n                result = await this._captureBase64(imageOrFile, templateName);\r\n            }\r\n            else {\r\n                result = await this._captureUrl(imageOrFile, templateName);\r\n            }\r\n        }\r\n        else if (imageOrFile instanceof Blob) {\r\n            result = await this._captureBlob(imageOrFile, templateName);\r\n        }\r\n        else if (imageOrFile instanceof HTMLImageElement) {\r\n            result = await this._captureImage(imageOrFile, templateName);\r\n        }\r\n        else if (imageOrFile instanceof HTMLCanvasElement) {\r\n            result = await this._captureCanvas(imageOrFile, templateName);\r\n        }\r\n        else if (imageOrFile instanceof HTMLVideoElement) {\r\n            result = await this._captureVideo(imageOrFile, templateName);\r\n        }\r\n        else {\r\n            throw new TypeError(\"'capture(imageOrFile, templateName)': Type of 'imageOrFile' should be 'DSImageData', 'Url', 'Base64', 'Blob', 'HTMLImageElement', 'HTMLCanvasElement', 'HTMLVideoElement'.\");\r\n        }\r\n        return result;\r\n    }\r\n    ;\r\n    async _captureDsimage(imageOrFile, templateName) {\r\n        return await this._captureInWorker(imageOrFile, templateName);\r\n    }\r\n    async _captureUrl(imageOrFile, templateName) {\r\n        let blob = await (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.requestResource)(imageOrFile, \"blob\");\r\n        return await this._captureBlob(blob, templateName);\r\n    }\r\n    async _captureBase64(base64Str, templateName) {\r\n        base64Str = base64Str.substring(base64Str.indexOf(',') + 1);\r\n        let binaryStr = atob(base64Str);\r\n        let n = binaryStr.length;\r\n        let u8arr = new Uint8Array(n);\r\n        while (n--) {\r\n            u8arr[n] = binaryStr.charCodeAt(n);\r\n        }\r\n        return await this._captureBlob(new Blob([u8arr]), templateName);\r\n    }\r\n    async _captureBlob(imageOrFile, templateName) {\r\n        const useObjurlToDrawBlobToImg = async function (blob) {\r\n            return await new Promise((rs, rj) => {\r\n                let objUrl = URL.createObjectURL(blob);\r\n                let image = new Image();\r\n                image.src = objUrl;\r\n                image.onload = () => {\r\n                    URL.revokeObjectURL(image.dbrObjUrl); // relese memory\r\n                    rs(image);\r\n                };\r\n                image.onerror = ev => {\r\n                    rj(new Error(\"Can't convert blob to image : \" + (ev instanceof Event ? ev.type : ev)));\r\n                };\r\n            });\r\n        };\r\n        let imageBitmap = null;\r\n        let img = null;\r\n        if (typeof createImageBitmap !== \"undefined\") {\r\n            try {\r\n                imageBitmap = await createImageBitmap(imageOrFile);\r\n            }\r\n            catch (ex) {\r\n                // createImageBitmap maybe fail in a lot of sense\r\n                // although objurl can pass\r\n            }\r\n        }\r\n        if (!imageBitmap) {\r\n            img = await useObjurlToDrawBlobToImg(imageOrFile);\r\n        }\r\n        let results = await this._captureImage(imageBitmap || img, templateName);\r\n        if (imageBitmap) {\r\n            imageBitmap.close();\r\n        } // release memory\r\n        return results;\r\n    }\r\n    async _captureImage(image, templateName) {\r\n        let imgW = image instanceof HTMLImageElement ? image.naturalWidth : image.width;\r\n        let imgH = image instanceof HTMLImageElement ? image.naturalHeight : image.height;\r\n        let maxNaturalWH = Math.max(imgW, imgH);\r\n        let acceptW, acceptH;\r\n        if (maxNaturalWH > this.maxCvsSideLength) {\r\n            __classPrivateFieldSet(this, _CaptureVisionRouter_compressRate, this.maxCvsSideLength / maxNaturalWH, \"f\");\r\n            acceptW = Math.round(imgW * __classPrivateFieldGet(this, _CaptureVisionRouter_compressRate, \"f\"));\r\n            acceptH = Math.round(imgH * __classPrivateFieldGet(this, _CaptureVisionRouter_compressRate, \"f\"));\r\n        }\r\n        else {\r\n            acceptW = imgW;\r\n            acceptH = imgH;\r\n        }\r\n        if (!__classPrivateFieldGet(this, _CaptureVisionRouter_canvas, \"f\")) {\r\n            __classPrivateFieldSet(this, _CaptureVisionRouter_canvas, document.createElement('canvas'), \"f\");\r\n        }\r\n        const cvs = __classPrivateFieldGet(this, _CaptureVisionRouter_canvas, \"f\");\r\n        if (cvs.width !== acceptW || cvs.height !== acceptH) {\r\n            cvs.width = acceptW;\r\n            cvs.height = acceptH;\r\n        }\r\n        if (!cvs.ctx2d) {\r\n            cvs.ctx2d = cvs.getContext('2d', { willReadFrequently: true });\r\n        }\r\n        const ctx = cvs.ctx2d;\r\n        ctx.drawImage(image, 0, 0, imgW, imgH, 0, 0, acceptW, acceptH);\r\n        if (image.dbrObjUrl) {\r\n            URL.revokeObjectURL(image.dbrObjUrl); // relese memory\r\n        }\r\n        return await this._captureCanvas(cvs, templateName);\r\n    }\r\n    async _captureCanvas(canvas, templateName) {\r\n        if (canvas.crossOrigin && \"anonymous\" != canvas.crossOrigin) { // canvas has crossOrigin to detect if cors, is native api\r\n            throw \"cors\";\r\n        }\r\n        if ([canvas.width, canvas.height].includes(0)) {\r\n            throw Error(`The width or height of the 'canvas' is 0.`);\r\n        }\r\n        const ctx = canvas.ctx2d || canvas.getContext(\"2d\", { willReadFrequently: true });\r\n        const imgData = Uint8Array.from(ctx.getImageData(0, 0, canvas.width, canvas.height).data);\r\n        const DsImageData = {\r\n            bytes: imgData,\r\n            width: canvas.width,\r\n            height: canvas.height,\r\n            stride: canvas.width * 4,\r\n            format: 10,\r\n        };\r\n        return await this._captureInWorker(DsImageData, templateName);\r\n    }\r\n    async _captureVideo(video, templateName) {\r\n        if (video.crossOrigin && \"anonymous\" != video.crossOrigin) {\r\n            throw \"cors\";\r\n        }\r\n        let imgW = video.videoWidth;\r\n        let imgH = video.videoHeight;\r\n        let maxNaturalWH = Math.max(imgW, imgH);\r\n        let acceptW, acceptH;\r\n        if (maxNaturalWH > this.maxCvsSideLength) {\r\n            __classPrivateFieldSet(this, _CaptureVisionRouter_compressRate, this.maxCvsSideLength / maxNaturalWH, \"f\");\r\n            acceptW = Math.round(imgW * __classPrivateFieldGet(this, _CaptureVisionRouter_compressRate, \"f\"));\r\n            acceptH = Math.round(imgH * __classPrivateFieldGet(this, _CaptureVisionRouter_compressRate, \"f\"));\r\n        }\r\n        else {\r\n            acceptW = imgW;\r\n            acceptH = imgH;\r\n        }\r\n        if (!__classPrivateFieldGet(this, _CaptureVisionRouter_canvas, \"f\")) {\r\n            __classPrivateFieldSet(this, _CaptureVisionRouter_canvas, document.createElement('canvas'), \"f\");\r\n        }\r\n        const cvs = __classPrivateFieldGet(this, _CaptureVisionRouter_canvas, \"f\");\r\n        if (cvs.width !== acceptW || cvs.height !== acceptH) {\r\n            cvs.width = acceptW;\r\n            cvs.height = acceptH;\r\n        }\r\n        if (!cvs.ctx2d) {\r\n            cvs.ctx2d = cvs.getContext('2d', { willReadFrequently: true });\r\n        }\r\n        const ctx = cvs.ctx2d;\r\n        ctx.drawImage(video, 0, 0, imgW, imgH, 0, 0, acceptW, acceptH);\r\n        return await this._captureCanvas(cvs, templateName);\r\n    }\r\n    async _captureInWorker(DsImageData, templateName) {\r\n        const { bytes, width, height, stride, format } = DsImageData;\r\n        let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n        const p = new MutablePromise();\r\n        dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n            var _a, _b;\r\n            if (body.success) {\r\n                const getResultFromWorkerTime = Date.now();\r\n                if (CaptureVisionRouter._onLog) {\r\n                    CaptureVisionRouter._onLog(`get result time from worker: ${getResultFromWorkerTime}`);\r\n                    CaptureVisionRouter._onLog(`worker to main time consume: ${getResultFromWorkerTime - body.workerReturnMsgTime}`);\r\n                }\r\n                try {\r\n                    const captureResult = body.captureResult;\r\n                    if (captureResult.errorCode !== 0) {\r\n                        let error = new Error(captureResult.errorString);\r\n                        error.errorCode = captureResult.errorCode;\r\n                        return p.reject(error);\r\n                    }\r\n                    DsImageData.bytes = body.bytes;\r\n                    for (let item of captureResult.items) {\r\n                        if (__classPrivateFieldGet(this, _CaptureVisionRouter_compressRate, \"f\") !== 0) {\r\n                            convertCoordinates(item, __classPrivateFieldGet(this, _CaptureVisionRouter_compressRate, \"f\"));\r\n                        }\r\n                        if (item.type === dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_ORIGINAL_IMAGE) {\r\n                            item.imageData = DsImageData;\r\n                        }\r\n                        else if (item.type === dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_NORMALIZED_IMAGE) {\r\n                            (_a = dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapPackageRegister.ddn) === null || _a === void 0 ? void 0 : _a.handleNormalizedImageResultItem(item);\r\n                        }\r\n                        else if (item.type === dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumCapturedResultItemType.CRIT_PARSED_RESULT) {\r\n                            (_b = dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapPackageRegister.dcp) === null || _b === void 0 ? void 0 : _b.handleParsedResultItem(item);\r\n                        }\r\n                    }\r\n                    if (__classPrivateFieldGet(this, _CaptureVisionRouter_isScanner, \"f\")) {\r\n                        for (let filter of __classPrivateFieldGet(this, _CaptureVisionRouter_resultFilterSet, \"f\")) {\r\n                            filter.onDecodedBarcodesReceived(captureResult);\r\n                            filter.onRecognizedTextLinesReceived(captureResult);\r\n                            filter.onDetectedQuadsReceived(captureResult);\r\n                            filter.onNormalizedImagesReceived(captureResult);\r\n                        }\r\n                    }\r\n                    const resultsForDraw = handleResultForDraw(captureResult);\r\n                    resultsForDraw.barcodeResultItems.length && (captureResult.barcodeResultItems = resultsForDraw.barcodeResultItems);\r\n                    resultsForDraw.textLineResultItems.length && (captureResult.textLineResultItems = resultsForDraw.textLineResultItems);\r\n                    resultsForDraw.detectedQuadResultItems.length && (captureResult.detectedQuadResultItems = resultsForDraw.detectedQuadResultItems);\r\n                    resultsForDraw.normalizedImageResultItems.length && (captureResult.normalizedImageResultItems = resultsForDraw.normalizedImageResultItems);\r\n                    resultsForDraw.parsedResultItems.length && (captureResult.parsedResultItems = resultsForDraw.parsedResultItems);\r\n                    if (!this._isPauseScan || !__classPrivateFieldGet(this, _CaptureVisionRouter_isScanner, \"f\")) {\r\n                        const irs = captureResult.intermediateResult; // irs => intermediateResults\r\n                        if (irs) {\r\n                            let irrSetCount = 0;\r\n                            for (let irr of __classPrivateFieldGet(this, _CaptureVisionRouter_intermediateResultManager, \"f\")._intermediateResultReceiverSet) {\r\n                                irrSetCount++;\r\n                                for (let cb of irs) {\r\n                                    if (cb.info.callbackName === \"onTaskResultsReceived\") {\r\n                                        for (let unit of cb.intermediateResultUnits) {\r\n                                            unit.originalImageTag = DsImageData.tag ? DsImageData.tag : null;\r\n                                        }\r\n                                        if (irr[cb.info.callbackName]) {\r\n                                            irr[cb.info.callbackName]({ intermediateResultUnits: cb.intermediateResultUnits }, cb.info);\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        if (irr[cb.info.callbackName]) {\r\n                                            irr[cb.info.callbackName](cb.result, cb.info);\r\n                                        }\r\n                                    }\r\n                                    if (irrSetCount === __classPrivateFieldGet(this, _CaptureVisionRouter_intermediateResultManager, \"f\")._intermediateResultReceiverSet.size) {\r\n                                        delete cb.info.callbackName;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    captureResult && captureResult.hasOwnProperty(\"intermediateResult\") && delete captureResult.intermediateResult;\r\n                    __classPrivateFieldSet(this, _CaptureVisionRouter_compressRate, 0, \"f\");\r\n                    return p.resolve(captureResult);\r\n                }\r\n                catch (ex) {\r\n                    return p.reject(ex);\r\n                }\r\n            }\r\n            else {\r\n                let ex = new Error(body.message);\r\n                ex.stack = body.stack + '\\n' + ex.stack;\r\n                return p.reject(ex);\r\n            }\r\n        };\r\n        if (CaptureVisionRouter._onLog) {\r\n            CaptureVisionRouter._onLog(`send buffer to worker: ${Date.now()}`);\r\n        }\r\n        dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n            type: \"cvr_capture\",\r\n            id: taskID,\r\n            instanceID: this._instanceID,\r\n            body: {\r\n                bytes,\r\n                width,\r\n                height,\r\n                stride,\r\n                format,\r\n                templateName: templateName ? templateName : \"\",\r\n                isScanner: __classPrivateFieldGet(this, _CaptureVisionRouter_isScanner, \"f\")\r\n            }\r\n        }, [bytes.buffer]);\r\n        return p;\r\n    }\r\n    ;\r\n    /**\r\n     * Configures runtime settings using a provided JSON string, an object, or a URL pointing to an object, which contains settings for one or more `CaptureVisionTemplates`.\r\n     * @param settings A JSON string, an object, or a URL pointing to an object that contains settings for one or more `CaptureVisionTemplates`.\r\n     *\r\n     * @returns A promise that resolves when the operation has completed. It provides an object that describes the result.\r\n     */\r\n    async initSettings(settings) {\r\n        checkIsDisposed(this);\r\n        if (!settings || ![\"string\", \"object\"].includes(typeof settings)) {\r\n            return console.error(\"Invalid template.\");\r\n        }\r\n        if (typeof settings === \"string\") {\r\n            if (!settings.startsWith(\"{\")) {\r\n                settings = await (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.requestResource)(settings, \"text\");\r\n            }\r\n            this._currentSettings = JSON.parse(settings);\r\n        }\r\n        else if (typeof settings === \"object\") {\r\n            this._currentSettings = settings;\r\n            settings = JSON.stringify(settings);\r\n        }\r\n        return await new Promise((rs, rj) => {\r\n            let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n                if (body.success) {\r\n                    const response = JSON.parse(body.response);\r\n                    if (response.exception !== 0) {\r\n                        let error = new Error(response.description ? response.description : \"Init Settings Failed.\");\r\n                        error.errorCode = response.exception;\r\n                        return rj(error);\r\n                    }\r\n                    let modules = [];\r\n                    let templateNames = JSON.parse(settings).CaptureVisionTemplates;\r\n                    for (let i = 0; i < templateNames.length; i++) {\r\n                        let tasks = await this.containsTask(templateNames[i].Name);\r\n                        modules = modules.concat(tasks);\r\n                    }\r\n                    await (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.loadWasm)([...new Set(modules)]);\r\n                    this._isOutputOriginalImage = (this._currentSettings.CaptureVisionTemplates[0].OutputOriginalImage === 1);\r\n                    return rs(response);\r\n                }\r\n                else {\r\n                    let ex = new Error(body.message);\r\n                    ex.stack = body.stack + '\\n' + ex.stack;\r\n                    return rj(ex);\r\n                }\r\n            };\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n                type: \"cvr_initSettings\",\r\n                id: taskID,\r\n                instanceID: this._instanceID,\r\n                body: { settings },\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * Returns an object that contains settings for the specified `CaptureVisionTemplate`.\r\n     * @param templateName Specifies a `CaptureVisionTemplate` by its name. If passed \"*\", the returned object will contain all templates.\r\n     *\r\n     * @returns A promise that resolves with the object that contains settings for the specified template or all templates.\r\n     */\r\n    async outputSettings(templateName) {\r\n        checkIsDisposed(this);\r\n        return await new Promise((rs, rj) => {\r\n            let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n                if (body.success) {\r\n                    const settings = JSON.parse(body.settings);\r\n                    if (settings.errorCode !== 0) {\r\n                        let error = new Error(settings.errorString);\r\n                        error.errorCode = settings.errorCode;\r\n                        return rj(error);\r\n                    }\r\n                    delete settings.errorCode;\r\n                    delete settings.errorString;\r\n                    return rs(settings);\r\n                }\r\n                else {\r\n                    let ex = new Error(body.message);\r\n                    ex.stack = body.stack + '\\n' + ex.stack;\r\n                    return rj(ex);\r\n                }\r\n            };\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n                type: \"cvr_outputSettings\",\r\n                id: taskID,\r\n                instanceID: this._instanceID,\r\n                body: {\r\n                    templateName: templateName ? templateName : \"*\"\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * Generates a Blob object or initiates a JSON file download containing the settings for the specified `CaptureVisionTemplate`.\r\n     * @param templateName Specifies a `CaptureVisionTemplate` by its name. If passed \"*\", the returned object will contain all templates.\r\n     * @param fileName Specifies the name of the file.\r\n     * @param download Boolean that specifies whether to initiates a file download.\r\n     *\r\n     * @returns A promise that resolves with the Blob object that contains settings for the specified template or all templates.\r\n     */\r\n    async outputSettingsToFile(templateName, fileName, download) {\r\n        const settings = await this.outputSettings(templateName);\r\n        const jsonBlob = new Blob([JSON.stringify(settings, null, 2, function (_, value) {\r\n                if (value instanceof Array) {\r\n                    return JSON.stringify(value);\r\n                }\r\n                else {\r\n                    return value;\r\n                }\r\n            }, 2)], { type: \"application/json\" });\r\n        if (download) {\r\n            const downloadLink = document.createElement(\"a\");\r\n            downloadLink.href = URL.createObjectURL(jsonBlob);\r\n            if (fileName.endsWith(\".json\")) {\r\n                fileName = fileName.replace(\".json\", \"\");\r\n            }\r\n            downloadLink.download = `${fileName}.json`;\r\n            downloadLink.onclick = () => {\r\n                setTimeout(() => {\r\n                    URL.revokeObjectURL(downloadLink.href);\r\n                }, 500);\r\n            };\r\n            downloadLink.click();\r\n        }\r\n        return jsonBlob;\r\n    }\r\n    /**\r\n     * Retrieves a JSON object that contains simplified settings for the specified `CaptureVisionTemplate`.\r\n     * @param templateName Specifies a `CaptureVisionTemplate` by its name.\r\n     *\r\n     * @returns A promise that resolves with a JSON object, of type `SimplifiedCaptureVisionSettings`, which represents the simplified settings for the specified template.\r\n     * @remarks If the settings of the specified template are too complex, we cannot create a SimplifiedCaptureVisionSettings, and as a result, it will return an error.\r\n     */\r\n    async getSimplifiedSettings(templateName) {\r\n        checkIsDisposed(this);\r\n        if (!templateName)\r\n            templateName = this._currentSettings.CaptureVisionTemplates[0].Name;\r\n        const tasks = await this.containsTask(templateName);\r\n        await (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.loadWasm)(tasks);\r\n        return await new Promise((rs, rj) => {\r\n            let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n                if (body.success) {\r\n                    const result = JSON.parse(body.settings, (k, v) => {\r\n                        if (k === \"barcodeFormatIds\") {\r\n                            return BigInt(v);\r\n                        }\r\n                        return v;\r\n                    });\r\n                    result.minImageCaptureInterval = this._minImageCaptureInterval;\r\n                    if (result.code !== 0) {\r\n                        let error = new Error(result.codeString);\r\n                        error.errorCode = result.errorCode;\r\n                        return rj(error);\r\n                    }\r\n                    delete result.code;\r\n                    delete result.codeString;\r\n                    return rs(result);\r\n                }\r\n                else {\r\n                    let ex = new Error(body.message);\r\n                    ex.stack = body.stack + '\\n' + ex.stack;\r\n                    return rj(ex);\r\n                }\r\n            };\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n                type: \"cvr_getSimplifiedSettings\",\r\n                id: taskID,\r\n                instanceID: this._instanceID,\r\n                body: { templateName }\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * Updates the specified `CaptureVisionTemplate` with an updated `SimplifiedCaptureVisionSettings` object.\r\n     * @param templateName Specifies a `CaptureVisionTemplate` by its name.\r\n     * @param settings The `SimplifiedCaptureVisionSettings` object that contains updated settings.\r\n     *\r\n     * @returns A promise that resolves when the operation has completed. It provides an object that describes the result.\r\n     */\r\n    async updateSettings(templateName, settings) {\r\n        checkIsDisposed(this);\r\n        const tasks = await this.containsTask(templateName);\r\n        await (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.loadWasm)(tasks);\r\n        return await new Promise((rs, rj) => {\r\n            let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n                if (body.success) {\r\n                    const response = JSON.parse(body.response);\r\n                    if (settings.minImageCaptureInterval && settings.minImageCaptureInterval >= -1) {\r\n                        this._minImageCaptureInterval = settings.minImageCaptureInterval;\r\n                    }\r\n                    this._isOutputOriginalImage = body.isOutputOriginalImage;\r\n                    if (response.exception !== 0) {\r\n                        let error = new Error(response.description ? response.description : \"Update Settings Failed.\");\r\n                        error.errorCode = response.exception;\r\n                        return rj(error);\r\n                    }\r\n                    this._currentSettings = await this.outputSettings(\"*\");\r\n                    return rs(response);\r\n                }\r\n                else {\r\n                    let ex = new Error(body.message);\r\n                    ex.stack = body.stack + '\\n' + ex.stack;\r\n                    return rj(ex);\r\n                }\r\n            };\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n                type: \"cvr_updateSettings\",\r\n                id: taskID,\r\n                instanceID: this._instanceID,\r\n                body: {\r\n                    settings,\r\n                    templateName\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Restores all runtime settings to their original default values.\r\n     *\r\n     * @returns A promise that resolves when the operation has completed. It provides an object that describes the result.\r\n     */\r\n    async resetSettings() {\r\n        checkIsDisposed(this);\r\n        return await new Promise((rs, rj) => {\r\n            let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n                if (body.success) {\r\n                    const response = JSON.parse(body.response);\r\n                    if (response.exception !== 0) {\r\n                        let error = new Error(response.description ? response.description : \"Reset Settings Failed.\");\r\n                        error.errorCode = response.exception;\r\n                        return rj(error);\r\n                    }\r\n                    this._currentSettings = await this.outputSettings(\"*\");\r\n                    return rs(response);\r\n                }\r\n                else {\r\n                    let ex = new Error(body.message);\r\n                    ex.stack = body.stack + '\\n' + ex.stack;\r\n                    return rj(ex);\r\n                }\r\n            };\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n                type: \"cvr_resetSettings\",\r\n                id: taskID,\r\n                instanceID: this._instanceID\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * Returns an object, of type `BufferedItemsManager`, that manages buffered items.\r\n     * @returns The `BufferedItemsManager` object.\r\n     */\r\n    getBufferedItemsManager() {\r\n        if (!__classPrivateFieldGet(this, _CaptureVisionRouter_bufferdItemsManager, \"f\")) {\r\n            __classPrivateFieldSet(this, _CaptureVisionRouter_bufferdItemsManager, new BufferedItemsManager(this), \"f\");\r\n        }\r\n        return __classPrivateFieldGet(this, _CaptureVisionRouter_bufferdItemsManager, \"f\");\r\n    }\r\n    /**\r\n     * Returns an object, of type `IntermediateResultManager`, that manages intermediate results.\r\n     *\r\n     * @returns The `IntermediateResultManager` object.\r\n     */\r\n    getIntermediateResultManager() {\r\n        checkIsDisposed(this);\r\n        if (!__classPrivateFieldGet(this, _CaptureVisionRouter_innerUseTag, \"f\") && dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.CoreModule.bSupportIRTModule !== 0) {\r\n            throw new Error(\"The current license does not support the use of intermediate results.\");\r\n        }\r\n        if (!__classPrivateFieldGet(this, _CaptureVisionRouter_intermediateResultManager, \"f\")) {\r\n            __classPrivateFieldSet(this, _CaptureVisionRouter_intermediateResultManager, new IntermediateResultManager(this), \"f\");\r\n        }\r\n        return __classPrivateFieldGet(this, _CaptureVisionRouter_intermediateResultManager, \"f\");\r\n    }\r\n    ;\r\n    async parseRequiredResources(templateName) {\r\n        checkIsDisposed(this);\r\n        return await new Promise((rs, rj) => {\r\n            let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n                if (body.success) {\r\n                    return rs(JSON.parse(body.resources));\r\n                }\r\n                else {\r\n                    let ex = new Error(body.message);\r\n                    ex.stack = body.stack + '\\n' + ex.stack;\r\n                    return rj(ex);\r\n                }\r\n            };\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n                type: \"cvr_parseRequiredResources\",\r\n                id: taskID,\r\n                instanceID: this._instanceID,\r\n                body: {\r\n                    templateName\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Releases all resources used by the `CaptureVisionRouter` instance.\r\n     *\r\n     * @returns A promise that resolves when the resources have been successfully released. It does not provide any value upon resolution.\r\n     */\r\n    async dispose() {\r\n        checkIsDisposed(this);\r\n        if (__classPrivateFieldGet(this, _CaptureVisionRouter_promiseStartScan, \"f\")) {\r\n            this.stopCapturing();\r\n        }\r\n        __classPrivateFieldSet(this, _CaptureVisionRouter_isa, null, \"f\");\r\n        __classPrivateFieldGet(this, _CaptureVisionRouter_resultReceiverSet, \"f\").clear();\r\n        __classPrivateFieldGet(this, _CaptureVisionRouter_isaStateListenerSet, \"f\").clear();\r\n        __classPrivateFieldGet(this, _CaptureVisionRouter_resultFilterSet, \"f\").clear();\r\n        __classPrivateFieldGet(this, _CaptureVisionRouter_intermediateResultManager, \"f\")._intermediateResultReceiverSet.clear();\r\n        __classPrivateFieldSet(this, _CaptureVisionRouter_isDestroyed, true, \"f\");\r\n        // this._captureStateListenerSet.clear();\r\n        let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n        dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = (body) => {\r\n            if (body.success) ;\r\n            else {\r\n                let ex = new Error(body.message);\r\n                ex.stack = body.stack + '\\n' + ex.stack;\r\n                throw ex;\r\n            }\r\n        };\r\n        dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n            type: 'cvr_dispose',\r\n            id: taskID,\r\n            instanceID: this._instanceID\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * For Debug\r\n     */\r\n    _getInternalData() {\r\n        return {\r\n            isa: __classPrivateFieldGet(this, _CaptureVisionRouter_isa, \"f\"),\r\n            promiseStartScan: __classPrivateFieldGet(this, _CaptureVisionRouter_promiseStartScan, \"f\"),\r\n            intermediateResultManager: __classPrivateFieldGet(this, _CaptureVisionRouter_intermediateResultManager, \"f\"),\r\n            bufferdItemsManager: __classPrivateFieldGet(this, _CaptureVisionRouter_bufferdItemsManager, \"f\"),\r\n            resultReceiverSet: __classPrivateFieldGet(this, _CaptureVisionRouter_resultReceiverSet, \"f\"),\r\n            isaStateListenerSet: __classPrivateFieldGet(this, _CaptureVisionRouter_isaStateListenerSet, \"f\"),\r\n            resultFilterSet: __classPrivateFieldGet(this, _CaptureVisionRouter_resultFilterSet, \"f\"),\r\n            compressRate: __classPrivateFieldGet(this, _CaptureVisionRouter_compressRate, \"f\"),\r\n            canvas: __classPrivateFieldGet(this, _CaptureVisionRouter_canvas, \"f\"),\r\n            isScanner: __classPrivateFieldGet(this, _CaptureVisionRouter_isScanner, \"f\"),\r\n            innerUseTag: __classPrivateFieldGet(this, _CaptureVisionRouter_innerUseTag, \"f\"),\r\n            isDestroyed: __classPrivateFieldGet(this, _CaptureVisionRouter_isDestroyed, \"f\")\r\n        };\r\n    }\r\n    async _getWasmFilterState() {\r\n        return await new Promise((rs, rj) => {\r\n            let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n                if (body.success) {\r\n                    const response = JSON.parse(body.response);\r\n                    return rs(response);\r\n                }\r\n                else {\r\n                    let ex = new Error(body.message);\r\n                    ex.stack = body.stack + '\\n' + ex.stack;\r\n                    return rj(ex);\r\n                }\r\n            };\r\n            dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n                type: \"cvr_getWasmFilterState\",\r\n                id: taskID,\r\n                instanceID: this._instanceID\r\n            });\r\n        });\r\n    }\r\n}\r\n_CaptureVisionRouter_isa = new WeakMap(), _CaptureVisionRouter_canvas = new WeakMap(), _CaptureVisionRouter_promiseStartScan = new WeakMap(), _CaptureVisionRouter_intermediateResultManager = new WeakMap(), _CaptureVisionRouter_bufferdItemsManager = new WeakMap(), _CaptureVisionRouter_resultReceiverSet = new WeakMap(), _CaptureVisionRouter_isaStateListenerSet = new WeakMap(), _CaptureVisionRouter_resultFilterSet = new WeakMap(), _CaptureVisionRouter_compressRate = new WeakMap(), _CaptureVisionRouter_isScanner = new WeakMap(), _CaptureVisionRouter_innerUseTag = new WeakMap(), _CaptureVisionRouter_isDestroyed = new WeakMap();\r\nasync function _enableResultCrossVerification(cvr, verificationEnabled) {\r\n    checkIsDisposed(cvr);\r\n    return await new Promise((rs, rj) => {\r\n        let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n        dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n            if (body.success) {\r\n                return rs(body.result);\r\n            }\r\n            else {\r\n                let ex = new Error(body.message);\r\n                ex.stack = body.stack + '\\n' + ex.stack;\r\n                return rj(ex);\r\n            }\r\n        };\r\n        dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n            type: \"cvr_enableResultCrossVerification\",\r\n            id: taskID,\r\n            instanceID: cvr._instanceID,\r\n            body: {\r\n                verificationEnabled\r\n            }\r\n        });\r\n    });\r\n}\r\nasync function _enableResultDeduplication(cvr, duplicateFilterEnabled) {\r\n    checkIsDisposed(cvr);\r\n    return await new Promise((rs, rj) => {\r\n        let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n        dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n            if (body.success) {\r\n                return rs(body.result);\r\n            }\r\n            else {\r\n                let ex = new Error(body.message);\r\n                ex.stack = body.stack + '\\n' + ex.stack;\r\n                return rj(ex);\r\n            }\r\n        };\r\n        dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n            type: \"cvr_enableResultDeduplication\",\r\n            id: taskID,\r\n            instanceID: cvr._instanceID,\r\n            body: {\r\n                duplicateFilterEnabled\r\n            }\r\n        });\r\n    });\r\n}\r\nasync function _setDuplicateForgetTime(cvr, duplicateForgetTime) {\r\n    checkIsDisposed(cvr);\r\n    return await new Promise((rs, rj) => {\r\n        let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n        dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n            if (body.success) {\r\n                return rs(body.result);\r\n            }\r\n            else {\r\n                let ex = new Error(body.message);\r\n                ex.stack = body.stack + '\\n' + ex.stack;\r\n                return rj(ex);\r\n            }\r\n        };\r\n        dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n            type: \"cvr_setDuplicateForgetTime\",\r\n            id: taskID,\r\n            instanceID: cvr._instanceID,\r\n            body: {\r\n                duplicateForgetTime\r\n            }\r\n        });\r\n    });\r\n}\r\nasync function _clearVerifyList(cvr) {\r\n    let taskID = (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();\r\n    const p = new MutablePromise();\r\n    dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[taskID] = async (body) => {\r\n        if (body.success) {\r\n            return p.resolve();\r\n        }\r\n        else {\r\n            let ex = new Error(body.message);\r\n            ex.stack = body.stack + '\\n' + ex.stack;\r\n            return p.reject(ex);\r\n        }\r\n    };\r\n    dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({\r\n        type: \"cvr_clearVerifyList\",\r\n        id: taskID,\r\n        instanceID: cvr._instanceID\r\n    });\r\n    return p;\r\n}\n\n// TODO\r\nclass CapturedResultReceiver {\r\n    constructor() {\r\n        /**\r\n         * Event triggered when a generic captured result is available, occurring each time an image finishes its processing.\r\n         * This event can be used for any result that does not fit into the specific categories of the other callback events.\r\n         * @param result The captured result, an instance of `CapturedResult`.\r\n         */\r\n        this.onCapturedResultReceived = null;\r\n        /**\r\n         * Event triggered when the original image result is available.\r\n         * This event is used to handle the original image captured by an image source such as Dynamsoft Camera Enhancer.\r\n         * @param result The original image result, an instance of `OriginalImageResultItem`.\r\n         */\r\n        this.onOriginalImageResultReceived = null;\r\n    }\r\n}\n\nclass IntermediateResultReceiver {\r\n    constructor() {\r\n        this._observedResultUnitTypes = dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.EnumIntermediateResultUnitType.IRUT_ALL;\r\n        this._observedTaskMap = new Map();\r\n        this._parameters = {\r\n            setObservedResultUnitTypes: (types) => {\r\n                this._observedResultUnitTypes = types;\r\n            },\r\n            getObservedResultUnitTypes: () => {\r\n                return this._observedResultUnitTypes;\r\n            },\r\n            isResultUnitTypeObserved: (type) => {\r\n                return !!(type & this._observedResultUnitTypes);\r\n            },\r\n            addObservedTask: (taskName) => {\r\n                this._observedTaskMap.set(taskName, true);\r\n            },\r\n            removeObservedTask: (taskName) => {\r\n                this._observedTaskMap.set(taskName, false);\r\n            },\r\n            isTaskObserved: (taskName) => {\r\n                if (this._observedTaskMap.size === 0)\r\n                    return true;\r\n                return !!(this._observedTaskMap.get(taskName));\r\n            }\r\n        };\r\n        this.onTaskResultsReceived = null;\r\n        // section\r\n        this.onPredetectedRegionsReceived = null;\r\n        // The remaining callback definitions will be automatically injected when imported into other modules\r\n        // stage\r\n        this.onColourImageUnitReceived = null;\r\n        this.onScaledDownColourImageUnitReceived = null;\r\n        this.onGrayscaleImageUnitReceived = null;\r\n        this.onTransformedGrayscaleImageUnitReceived = null;\r\n        this.onEnhancedGrayscaleImageUnitReceived = null;\r\n        this.onBinaryImageUnitReceived = null;\r\n        this.onTextureDetectionResultUnitReceived = null;\r\n        this.onTextureRemovedGrayscaleImageUnitReceived = null;\r\n        this.onTextureRemovedBinaryImageUnitReceived = null;\r\n        this.onContoursUnitReceived = null;\r\n        this.onLineSegmentsUnitReceived = null;\r\n        this.onTextZonesUnitReceived = null;\r\n        this.onTextRemovedBinaryImageUnitReceived = null;\r\n        this.onShortLinesUnitReceived = null;\r\n        // The remaining callback definitions will be automatically injected when imported into other modules\r\n    }\r\n    /**\r\n     * Gets the observed parameters of the intermediate result receiver. Allowing for configuration of intermediate result observation.\r\n     * @return The observed parameters, of type ObservationParameters. The default parameters are to observe all intermediate result unit types and all tasks.\r\n     */\r\n    getObservationParameters() {\r\n        return this._parameters;\r\n    }\r\n}\n\nvar EnumPresetTemplate;\r\n(function (EnumPresetTemplate) {\r\n    /**\r\n     * @brief Versatile function for barcode reading, document detection, or text recognition.\r\n     */\r\n    EnumPresetTemplate[\"PT_DEFAULT\"] = \"Default\";\r\n    /**\r\n     * @brief Scans a single barcode.\r\n     */\r\n    EnumPresetTemplate[\"PT_READ_BARCODES\"] = \"ReadBarcodes_Default\";\r\n    /**\r\n     * @brief Identifies and reads any text present.\r\n     */\r\n    EnumPresetTemplate[\"PT_RECOGNIZE_TEXT_LINES\"] = \"RecognizeTextLines_Default\";\r\n    /**\r\n     * @brief RIdentifies the edges of a document.\r\n     */\r\n    EnumPresetTemplate[\"PT_DETECT_DOCUMENT_BOUNDARIES\"] = \"DetectDocumentBoundaries_Default\";\r\n    /**\r\n     * @brief Detects document edges and standardizes its format.\r\n     */\r\n    EnumPresetTemplate[\"PT_DETECT_AND_NORMALIZE_DOCUMENT\"] = \"DetectAndNormalizeDocument_Default\";\r\n    /**\r\n     * @brief Adjusts a document to a standard format using detected borders.\r\n     */\r\n    EnumPresetTemplate[\"PT_NORMALIZE_DOCUMENT\"] = \"NormalizeDocument_Default\";\r\n    /**\r\n     * @brief Represents a barcode reading mode where speed is prioritized.\r\n     *\r\n     * In this mode, the barcode reader will optimize for faster barcode detection\r\n     * and decoding, sacrificing some level of accuracy and read rate. It is suitable\r\n     * for situations where a quick response time is more important than perfect\r\n     * barcode recognition.\r\n     */\r\n    EnumPresetTemplate[\"PT_READ_BARCODES_SPEED_FIRST\"] = \"ReadBarcodes_SpeedFirst\";\r\n    /**\r\n     * @brief Represents a barcode reading mode where barcode read rate is prioritized.\r\n     *\r\n     * In this mode, the barcode reader will optimize for higher barcode read rates,\r\n     * even if it may sometimes result in reduced accuracy and speed. It is suitable for\r\n     * scenarios where maximizing the number of successfully read barcodes is critical.\r\n     */\r\n    EnumPresetTemplate[\"PT_READ_BARCODES_READ_RATE_FIRST\"] = \"ReadBarcodes_ReadRateFirst\";\r\n    /**\r\n     * @brief Represents a balanced barcode reading mode.\r\n     *\r\n     * This mode aims for a reasonable balance between speed and read rate in barcode\r\n     * recognition. It is suitable for most common use cases where a compromise between\r\n     * speed and read rate is acceptable.\r\n     */\r\n    EnumPresetTemplate[\"PT_READ_BARCODES_BALANCE\"] = \"ReadBarcodes_Balance\";\r\n    /**\r\n    * @brief Represents a barcode reading mode for single barcode code detection.\r\n    *\r\n    * In this mode, the barcode reader will focus on detecting and decoding a single\r\n    * barcode code, ignoring any additional codes in the same image. It is efficient\r\n    * when the target image has only one barcode.\r\n    */\r\n    EnumPresetTemplate[\"PT_READ_SINGLE_BARCODE\"] = \"ReadBarcodes_Balanced\";\r\n    /**\r\n     * @brief Represents a barcode reading mode optimized for dense barcode codes.\r\n     *\r\n     * This mode is designed to handle dense or closely packed barcode codes where\r\n     * accuracy is paramount. It may operate slower than other modes but is suitable\r\n     * for challenging scenarios where code density is high.\r\n     */\r\n    EnumPresetTemplate[\"PT_READ_DENSE_BARCODES\"] = \"ReadDenseBarcodes\";\r\n    /**\r\n     * @brief Represents a barcode reading mode optimized for distant barcode codes.\r\n     *\r\n     * This mode is designed to scanning a barcode that is placed far from the device.\r\n     */\r\n    EnumPresetTemplate[\"PT_READ_DISTANT_BARCODES\"] = \"ReadDistantBarcodes\";\r\n    /**\r\n    * @brief Represents a text recognition mode focused on recognizing numbers.\r\n    */\r\n    EnumPresetTemplate[\"PT_RECOGNIZE_NUMBERS\"] = \"RecognizeNumbers\";\r\n    /**\r\n     * @brief Represents a text recognition mode focused on recognizing alphabetic characters (letters).\r\n     *\r\n     */\r\n    EnumPresetTemplate[\"PT_RECOGNIZE_LETTERS\"] = \"RecognizeLetters\";\r\n    /**\r\n     * @brief Represents a text recognition mode that combines numbers and alphabetic characters (letters) recognition.\r\n     */\r\n    EnumPresetTemplate[\"PT_RECOGNIZE_NUMBERS_AND_LETTERS\"] = \"RecognizeNumbersAndLetters\";\r\n    /**\r\n     * @brief Represents a text recognition mode that combines numbers and uppercase letters recognition.\r\n     */\r\n    EnumPresetTemplate[\"PT_RECOGNIZE_NUMBERS_AND_UPPERCASE_LETTERS\"] = \"RecognizeNumbersAndUppercaseLetters\";\r\n    /**\r\n     * @brief Represents a text recognition mode focused on recognizing uppercase letters.\r\n     */\r\n    EnumPresetTemplate[\"PT_RECOGNIZE_UPPERCASE_LETTERS\"] = \"RecognizeUppercaseLetters\";\r\n})(EnumPresetTemplate || (EnumPresetTemplate = {}));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/dynamsoft-capture-vision-router/dist/cvr.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/dynamsoft-core/dist/core.esm.js":
/*!******************************************************!*\
  !*** ./node_modules/dynamsoft-core/dist/core.esm.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CoreModule: function() { return /* binding */ L_; },\n/* harmony export */   EnumBufferOverflowProtectionMode: function() { return /* binding */ e; },\n/* harmony export */   EnumCapturedResultItemType: function() { return /* binding */ D_; },\n/* harmony export */   EnumColourChannelUsageType: function() { return /* binding */ t; },\n/* harmony export */   EnumCornerType: function() { return /* binding */ O_; },\n/* harmony export */   EnumErrorCode: function() { return /* binding */ c_; },\n/* harmony export */   EnumGrayscaleEnhancementMode: function() { return /* binding */ S_; },\n/* harmony export */   EnumGrayscaleTransformationMode: function() { return /* binding */ l_; },\n/* harmony export */   EnumImagePixelFormat: function() { return /* binding */ I; },\n/* harmony export */   EnumImageTagType: function() { return /* binding */ f_; },\n/* harmony export */   EnumIntermediateResultUnitType: function() { return /* binding */ P_; },\n/* harmony export */   EnumPDFReadingMode: function() { return /* binding */ h_; },\n/* harmony export */   EnumRasterDataSource: function() { return /* binding */ d_; },\n/* harmony export */   EnumRegionObjectElementType: function() { return /* binding */ g_; },\n/* harmony export */   EnumSectionType: function() { return /* binding */ M_; },\n/* harmony export */   ImageSourceAdapter: function() { return /* binding */ H; },\n/* harmony export */   _getNorImageData: function() { return /* binding */ B; },\n/* harmony export */   _isArc: function() { return /* binding */ a; },\n/* harmony export */   _isContour: function() { return /* binding */ T; },\n/* harmony export */   _isDSImageData: function() { return /* binding */ R; },\n/* harmony export */   _isDSRect: function() { return /* binding */ L; },\n/* harmony export */   _isImageTag: function() { return /* binding */ D; },\n/* harmony export */   _isLineSegment: function() { return /* binding */ O; },\n/* harmony export */   _isPoint: function() { return /* binding */ c; },\n/* harmony export */   _isPolygon: function() { return /* binding */ S; },\n/* harmony export */   _isQuad: function() { return /* binding */ l; },\n/* harmony export */   _isRect: function() { return /* binding */ f; },\n/* harmony export */   _saveToFile: function() { return /* binding */ u; },\n/* harmony export */   _toBlob: function() { return /* binding */ U; },\n/* harmony export */   _toCanvas: function() { return /* binding */ F; },\n/* harmony export */   _toImage: function() { return /* binding */ G; },\n/* harmony export */   autoDiscoveryPaths: function() { return /* binding */ N_; },\n/* harmony export */   bDebug: function() { return /* binding */ C_; },\n/* harmony export */   checkIsLink: function() { return /* binding */ d; },\n/* harmony export */   compareVersion: function() { return /* binding */ P; },\n/* harmony export */   doOrWaitAsyncDependency: function() { return /* binding */ E_; },\n/* harmony export */   getNextTaskID: function() { return /* binding */ I_; },\n/* harmony export */   handleEngineResourcePaths: function() { return /* binding */ g; },\n/* harmony export */   innerVersions: function() { return /* binding */ o_; },\n/* harmony export */   isArc: function() { return /* binding */ a; },\n/* harmony export */   isContour: function() { return /* binding */ T; },\n/* harmony export */   isDSImageData: function() { return /* binding */ R; },\n/* harmony export */   isDSRect: function() { return /* binding */ L; },\n/* harmony export */   isImageTag: function() { return /* binding */ D; },\n/* harmony export */   isLineSegment: function() { return /* binding */ O; },\n/* harmony export */   isObject: function() { return /* binding */ N; },\n/* harmony export */   isPoint: function() { return /* binding */ c; },\n/* harmony export */   isPolygon: function() { return /* binding */ S; },\n/* harmony export */   isQuad: function() { return /* binding */ l; },\n/* harmony export */   isRect: function() { return /* binding */ f; },\n/* harmony export */   loadWasm: function() { return /* binding */ R_; },\n/* harmony export */   mapAsyncDependency: function() { return /* binding */ q; },\n/* harmony export */   mapPackageRegister: function() { return /* binding */ A_; },\n/* harmony export */   mapTaskCallBack: function() { return /* binding */ r_; },\n/* harmony export */   onLog: function() { return /* binding */ s_; },\n/* harmony export */   requestResource: function() { return /* binding */ h; },\n/* harmony export */   setBDebug: function() { return /* binding */ i_; },\n/* harmony export */   setOnLog: function() { return /* binding */ n_; },\n/* harmony export */   waitAsyncDependency: function() { return /* binding */ __; },\n/* harmony export */   worker: function() { return /* binding */ e_; },\n/* harmony export */   workerAutoResources: function() { return /* binding */ a_; }\n/* harmony export */ });\n/*!\n * Dynamsoft JavaScript Library\n * @product Dynamsoft Core JS Edition\n * @website https://www.dynamsoft.com\n * @copyright Copyright 2024, Dynamsoft Corporation\n * @author Dynamsoft\n * @version 3.4.20\n * @fileoverview Dynamsoft JavaScript Library for Core\n * More info on Dynamsoft Core JS: https://www.dynamsoft.com/capture-vision/docs/web/programming/javascript/api-reference/core/core-module.html\n */\nfunction _(_,E,e,t){if(\"a\"===e&&!t)throw new TypeError(\"Private accessor was defined without a getter\");if(\"function\"==typeof E?_!==E||!t:!E.has(_))throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");return\"m\"===e?t:\"a\"===e?t.call(_):t?t.value:E.get(_)}function E(_,E,e,t,I){if(\"m\"===t)throw new TypeError(\"Private method is not writable\");if(\"a\"===t&&!I)throw new TypeError(\"Private accessor was defined without a setter\");if(\"function\"==typeof E?_!==E||!I:!E.has(_))throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");return\"a\"===t?I.call(_,e):I?I.value=e:E.set(_,e),e}var e,t,I;\"function\"==typeof SuppressedError&&SuppressedError,function(_){_[_.BOPM_BLOCK=0]=\"BOPM_BLOCK\",_[_.BOPM_UPDATE=1]=\"BOPM_UPDATE\"}(e||(e={})),function(_){_[_.CCUT_AUTO=0]=\"CCUT_AUTO\",_[_.CCUT_FULL_CHANNEL=1]=\"CCUT_FULL_CHANNEL\",_[_.CCUT_Y_CHANNEL_ONLY=2]=\"CCUT_Y_CHANNEL_ONLY\",_[_.CCUT_RGB_R_CHANNEL_ONLY=3]=\"CCUT_RGB_R_CHANNEL_ONLY\",_[_.CCUT_RGB_G_CHANNEL_ONLY=4]=\"CCUT_RGB_G_CHANNEL_ONLY\",_[_.CCUT_RGB_B_CHANNEL_ONLY=5]=\"CCUT_RGB_B_CHANNEL_ONLY\"}(t||(t={})),function(_){_[_.IPF_BINARY=0]=\"IPF_BINARY\",_[_.IPF_BINARYINVERTED=1]=\"IPF_BINARYINVERTED\",_[_.IPF_GRAYSCALED=2]=\"IPF_GRAYSCALED\",_[_.IPF_NV21=3]=\"IPF_NV21\",_[_.IPF_RGB_565=4]=\"IPF_RGB_565\",_[_.IPF_RGB_555=5]=\"IPF_RGB_555\",_[_.IPF_RGB_888=6]=\"IPF_RGB_888\",_[_.IPF_ARGB_8888=7]=\"IPF_ARGB_8888\",_[_.IPF_RGB_161616=8]=\"IPF_RGB_161616\",_[_.IPF_ARGB_16161616=9]=\"IPF_ARGB_16161616\",_[_.IPF_ABGR_8888=10]=\"IPF_ABGR_8888\",_[_.IPF_ABGR_16161616=11]=\"IPF_ABGR_16161616\",_[_.IPF_BGR_888=12]=\"IPF_BGR_888\",_[_.IPF_BINARY_8=13]=\"IPF_BINARY_8\",_[_.IPF_NV12=14]=\"IPF_NV12\",_[_.IPF_BINARY_8_INVERTED=15]=\"IPF_BINARY_8_INVERTED\"}(I||(I={}));const r=\"undefined\"==typeof self,s=(()=>{if(!r&&document.currentScript){let _=document.currentScript.src,E=_.indexOf(\"?\");if(-1!=E)_=_.substring(0,E);else{let E=_.indexOf(\"#\");-1!=E&&(_=_.substring(0,E))}return _.substring(0,_.lastIndexOf(\"/\")+1)}return\"./\"})(),n=_=>{if(null==_&&(_=\"./\"),r);else{let E=document.createElement(\"a\");E.href=_,_=E.href}return _.endsWith(\"/\")||(_+=\"/\"),_},C=_=>Object.prototype.toString.call(_),i=_=>Array.isArray?Array.isArray(_):\"[object Array]\"===C(_),o=_=>\"[object Boolean]\"===C(_),A=_=>\"number\"==typeof _&&!Number.isNaN(_),N=_=>null!==_&&\"object\"==typeof _&&!Array.isArray(_),a=_=>!!N(_)&&(!!A(_.x)&&(!!A(_.y)&&(!!A(_.radius)&&(!(_.radius<0)&&(!!A(_.startAngle)&&!!A(_.endAngle)))))),T=_=>!!N(_)&&(!!i(_.points)&&(0!=_.points.length&&!_.points.some((_=>!c(_))))),R=_=>!!N(_)&&(_.bytes instanceof Uint8Array&&(!!A(_.width)&&(!(_.width<=0)&&(!!A(_.height)&&(!(_.height<=0)&&(!!A(_.stride)&&(!(_.stride<=0)&&(\"format\"in _&&!(\"tag\"in _&&!D(_.tag)))))))))),L=_=>!!N(_)&&(!!A(_.left)&&(!(_.left<0)&&(!!A(_.top)&&(!(_.top<0)&&(!!A(_.right)&&(!(_.right<0)&&(!!A(_.bottom)&&(!(_.bottom<0)&&(!(_.left>=_.right)&&(!(_.top>=_.bottom)&&!!o(_.isMeasuredInPercentage))))))))))),D=_=>!!N(_)&&(!!A(_.imageId)&&\"type\"in _),O=_=>!!N(_)&&(!!c(_.startPoint)&&(!!c(_.endPoint)&&(_.startPoint.x!=_.endPoint.x||_.startPoint.y!=_.endPoint.y))),c=_=>!!N(_)&&(!!A(_.x)&&!!A(_.y)),S=_=>!!N(_)&&(!!i(_.points)&&(0!=_.points.length&&!_.points.some((_=>!c(_))))),l=_=>!!N(_)&&(!!i(_.points)&&(0!=_.points.length&&4==_.points.length&&!_.points.some((_=>!c(_))))),f=_=>!!N(_)&&(!!A(_.x)&&(!!A(_.y)&&(!!A(_.width)&&(!(_.width<0)&&(!!A(_.height)&&(!(_.height<0)&&!(\"isMeasuredInPercentage\"in _&&!o(_.isMeasuredInPercentage))))))));async function h(_,E){return await new Promise(((e,t)=>{let I=new XMLHttpRequest;I.open(\"GET\",_,!0),I.responseType=E,I.send(),I.onloadend=async()=>{I.status<200||I.status>=300?t(_+\" \"+I.status):e(I.response)},I.onerror=()=>{t(new Error(\"Network Error: \"+I.statusText))}}))}function d(_){return/^(https:\\/\\/www\\.|http:\\/\\/www\\.|https:\\/\\/|http:\\/\\/)|^[a-zA-Z0-9]{2,}(\\.[a-zA-Z0-9]{2,})(\\.[a-zA-Z0-9]{2,})?/.test(_)}const P=(_,E)=>{let e=_.split(\".\"),t=E.split(\".\");for(let _=0;_<e.length&&_<t.length;++_){let E=e[_],I=t[_];if(E===I)continue;let r=parseInt(e[_]),s=parseInt(t[_]);return r===s||Number.isNaN(r)&&Number.isNaN(s)?E<I?-1:1:r<s||Number.isNaN(r)&&Number.isInteger(s)?-1:1}return e.length===t.length?0:e.length<t.length?-1:1},g=(_,E)=>{const e={};for(let t in E){const I=t;let r=_[I];r&&\"string\"!=typeof r&&r.path&&(r=r.path),_.rootDirectory&&!_.rootDirectory.endsWith(\"/\")&&(_.rootDirectory=_.rootDirectory+\"/\"),void 0===r?_.rootDirectory?r=`${_.rootDirectory}${M[I]}@${E[I].version}/dist/`:(r=E[I].path,r||(r=E[I])):r.startsWith(\"@engineRootDirectory/\")&&(r=r.replace(\"@engineRootDirectory/\",_.rootDirectory)),e[I]=n(r)}return e},M={std:\"dynamsoft-capture-vision-std\",dip:\"dynamsoft-image-processing\",core:\"dynamsoft-core\",dnn:\"dynamsoft-capture-vision-dnn\",license:\"dynamsoft-license\",utility:\"dynamsoft-utility\",cvr:\"dynamsoft-capture-vision-router\",dbr:\"dynamsoft-barcode-reader\",dlr:\"dynamsoft-label-recognizer\",ddn:\"dynamsoft-document-normalizer\",dcp:\"dynamsoft-code-parser\",dcpd:\"dynamsoft-code-parser\",dlrData:\"dynamsoft-label-recognizer-data\",dce:\"dynamsoft-camera-enhancer\"},u=async(_,E,e)=>await new Promise((async(t,I)=>{try{const I=E.split(\".\");let r=I[I.length-1];const s=await U(`image/${r}`,_);I.length<=1&&(r=\"png\");const n=new File([s],E,{type:`image/${r}`});if(e){const _=URL.createObjectURL(n),e=document.createElement(\"a\");e.href=_,e.download=E,e.click()}return t(n)}catch(_){return I()}})),F=_=>{R(_)&&(_=B(_));const E=document.createElement(\"canvas\");E.width=_.width,E.height=_.height;return E.getContext(\"2d\",{willReadFrequently:!0}).putImageData(_,0,0),E},G=(_,E)=>{R(E)&&(E=B(E));const e=F(E);let t=new Image,I=e.toDataURL(_);return t.src=I,t},U=async(_,E)=>{R(E)&&(E=B(E));const e=F(E);return new Promise(((E,t)=>{e.toBlob((_=>E(_)),_)}))},B=_=>{let E,e=_.bytes;if(!(e&&e instanceof Uint8Array))throw Error(\"Parameter type error\");if(Number(_.format)===I.IPF_BGR_888){const _=e.length/3;E=new Uint8ClampedArray(4*_);for(let t=0;t<_;++t)E[4*t]=e[3*t],E[4*t+1]=e[3*t+1],E[4*t+2]=e[3*t+2],E[4*t+3]=255}else if(Number(_.format)===I.IPF_RGB_888){const _=e.length/3;E=new Uint8ClampedArray(4*_);for(let t=0;t<_;++t)E[4*t]=e[3*t+2],E[4*t+1]=e[3*t+1],E[4*t+2]=e[3*t],E[4*t+3]=255}else if(Number(_.format)===I.IPF_GRAYSCALED){const _=e.length;E=new Uint8ClampedArray(4*_);for(let t=0;t<_;t++)E[4*t]=E[4*t+1]=E[4*t+2]=e[t],E[4*t+3]=255}else if(Number(_.format)===I.IPF_BINARY_8){const t=e.length,I=_.width,r=_.height,s=_.stride;E=new Uint8ClampedArray(I*r*4);for(let _=0;_<t;_++){let t=e[_],r=_%s,n=Math.floor(_/s);for(let _=0;_<8;_++){let e=r+_,s=4*(n*I+e);if(e>=I)break;E[s]=E[s+1]=E[s+2]=(128&t)/128*255,E[s+3]=255,t<<=1}}}else if(Number(_.format)===I.IPF_ABGR_8888){const _=e.length/4;E=new Uint8ClampedArray(e.length);for(let t=0;t<_;++t)E[4*t]=e[4*t],E[4*t+1]=e[4*t+1],E[4*t+2]=e[4*t+2],E[4*t+3]=e[4*t+3]}else if(Number(_.format)===I.IPF_ARGB_8888){const _=e.length/4;E=new Uint8ClampedArray(e.length);for(let t=0;t<_;++t)E[4*t]=e[4*t+2],E[4*t+1]=e[4*t+1],E[4*t+2]=e[4*t],E[4*t+3]=e[4*t+3]}return new ImageData(E,_.width,_.height)};var p,m,y,w,V,b,v,Y;class H{get _isFetchingStarted(){return _(this,V,\"f\")}constructor(){p.add(this),m.set(this,[]),y.set(this,1),w.set(this,e.BOPM_BLOCK),V.set(this,!1),b.set(this,void 0),v.set(this,t.CCUT_AUTO)}setErrorListener(_){}addImageToBuffer(E){var t;if(!R(E))throw new TypeError(\"Invalid 'image'.\");if((null===(t=E.tag)||void 0===t?void 0:t.hasOwnProperty(\"imageId\"))&&\"number\"==typeof E.tag.imageId&&this.hasImage(E.tag.imageId))throw new Error(\"Existed imageId.\");if(_(this,m,\"f\").length>=_(this,y,\"f\"))switch(_(this,w,\"f\")){case e.BOPM_BLOCK:break;case e.BOPM_UPDATE:if(_(this,m,\"f\").push(E),N(_(this,b,\"f\"))&&A(_(this,b,\"f\").imageId)&&1==_(this,b,\"f\").keepInBuffer)for(;_(this,m,\"f\").length>_(this,y,\"f\");){const E=_(this,m,\"f\").findIndex((E=>{var e;return(null===(e=E.tag)||void 0===e?void 0:e.imageId)!==_(this,b,\"f\").imageId}));_(this,m,\"f\").splice(E,1)}else _(this,m,\"f\").splice(0,_(this,m,\"f\").length-_(this,y,\"f\"))}else _(this,m,\"f\").push(E)}getImage(){if(0===_(this,m,\"f\").length)return null;let E;if(_(this,b,\"f\")&&A(_(this,b,\"f\").imageId)){const e=_(this,p,\"m\",Y).call(this,_(this,b,\"f\").imageId);if(e<0)throw new Error(`Image with id ${_(this,b,\"f\").imageId} doesn't exist.`);E=_(this,m,\"f\").slice(e,e+1)[0]}else E=_(this,m,\"f\").pop();if([I.IPF_RGB_565,I.IPF_RGB_555,I.IPF_RGB_888,I.IPF_ARGB_8888,I.IPF_RGB_161616,I.IPF_ARGB_16161616,I.IPF_ABGR_8888,I.IPF_ABGR_16161616,I.IPF_BGR_888].includes(E.format)){if(_(this,v,\"f\")===t.CCUT_RGB_R_CHANNEL_ONLY){H._onLog&&H._onLog(\"only get R channel data.\");const _=new Uint8Array(E.width*E.height);for(let e=0;e<_.length;e++)switch(E.format){case I.IPF_RGB_565:case I.IPF_RGB_555:case I.IPF_RGB_888:case I.IPF_RGB_161616:_[e]=E.bytes[3*e+2];break;case I.IPF_ARGB_8888:case I.IPF_ARGB_16161616:_[e]=E.bytes[4*e+2];break;case I.IPF_BGR_888:_[e]=E.bytes[3*e];break;case I.IPF_ABGR_8888:case I.IPF_ABGR_16161616:_[e]=E.bytes[4*e]}E.bytes=_,E.stride=E.width,E.format=I.IPF_GRAYSCALED}else if(_(this,v,\"f\")===t.CCUT_RGB_G_CHANNEL_ONLY){H._onLog&&H._onLog(\"only get G channel data.\");const _=new Uint8Array(E.width*E.height);for(let e=0;e<_.length;e++)switch(E.format){case I.IPF_RGB_565:case I.IPF_RGB_555:case I.IPF_RGB_888:case I.IPF_RGB_161616:case I.IPF_BGR_888:_[e]=E.bytes[3*e+1];break;case I.IPF_ARGB_8888:case I.IPF_ARGB_16161616:case I.IPF_ABGR_8888:case I.IPF_ABGR_16161616:_[e]=E.bytes[4*e+1]}E.bytes=_,E.stride=E.width,E.format=I.IPF_GRAYSCALED}else if(_(this,v,\"f\")===t.CCUT_RGB_B_CHANNEL_ONLY){H._onLog&&H._onLog(\"only get B channel data.\");const _=new Uint8Array(E.width*E.height);for(let e=0;e<_.length;e++)switch(E.format){case I.IPF_RGB_565:case I.IPF_RGB_555:case I.IPF_RGB_888:case I.IPF_RGB_161616:_[e]=E.bytes[3*e];break;case I.IPF_ARGB_8888:case I.IPF_ARGB_16161616:_[e]=E.bytes[4*e];break;case I.IPF_BGR_888:_[e]=E.bytes[3*e+2];break;case I.IPF_ABGR_8888:case I.IPF_ABGR_16161616:_[e]=E.bytes[4*e+2]}E.bytes=_,E.stride=E.width,E.format=I.IPF_GRAYSCALED}}else[I.IPF_NV21,I.IPF_NV12].includes(E.format)&&H._onLog&&H._onLog(\"NV21 or NV12 is not supported.\");return E}setNextImageToReturn(_,e){if(!((..._)=>0!==_.length&&_.every((_=>A(_))))(_))throw new TypeError(\"Invalid 'imageId'.\");if(void 0!==e&&!o(e))throw new TypeError(\"Invalid 'keepInBuffer'.\");E(this,b,{imageId:_,keepInBuffer:e},\"f\")}_resetNextReturnedImage(){E(this,b,null,\"f\")}hasImage(E){return _(this,p,\"m\",Y).call(this,E)>=0}startFetching(){E(this,V,!0,\"f\")}stopFetching(){E(this,V,!1,\"f\")}setMaxImageCount(e){if(\"number\"!=typeof e)throw new TypeError(\"Invalid 'count'.\");if(e<1||Math.round(e)!==e)throw new Error(\"Invalid 'count'.\");for(E(this,y,e,\"f\");_(this,m,\"f\")&&_(this,m,\"f\").length>e;)_(this,m,\"f\").shift()}getMaxImageCount(){return _(this,y,\"f\")}getImageCount(){return _(this,m,\"f\").length}clearBuffer(){_(this,m,\"f\").length=0}isBufferEmpty(){return 0===_(this,m,\"f\").length}setBufferOverflowProtectionMode(_){E(this,w,_,\"f\")}getBufferOverflowProtectionMode(){return _(this,w,\"f\")}setColourChannelUsageType(_){E(this,v,_,\"f\")}getColourChannelUsageType(){return _(this,v,\"f\")}}m=new WeakMap,y=new WeakMap,w=new WeakMap,V=new WeakMap,b=new WeakMap,v=new WeakMap,p=new WeakSet,Y=function(E){if(\"number\"!=typeof E)throw new TypeError(\"Invalid 'imageId'.\");return _(this,m,\"f\").findIndex((_=>{var e;return(null===(e=_.tag)||void 0===e?void 0:e.imageId)===E}))};const k=_=>_&&\"object\"==typeof _&&\"function\"==typeof _.then;class X extends Promise{get status(){return this._s}get isPending(){return\"pending\"===this._s}get isFulfilled(){return\"fulfilled\"===this._s}get isRejected(){return\"rejected\"===this._s}get task(){return this._task}set task(_){let E;this._task=_,k(_)?E=_:\"function\"==typeof _&&(E=new Promise(_)),E&&(async()=>{try{const e=await E;_===this._task&&this.resolve(e)}catch(E){_===this._task&&this.reject(E)}})()}get isEmpty(){return null==this._task}constructor(_){let E,e;super(((_,t)=>{E=_,e=t})),this._s=\"pending\",this.resolve=_=>{this.isPending&&(k(_)?this.task=_:(this._s=\"fulfilled\",E(_)))},this.reject=_=>{this.isPending&&(this._s=\"rejected\",e(_))},this.task=_}}let Z,W,x,K,j;\"undefined\"!=typeof navigator&&(Z=navigator,W=Z.userAgent,x=Z.platform,K=Z.mediaDevices),function(){if(!r){const _={Edge:{search:\"Edg\",verSearch:\"Edg\"},OPR:null,Chrome:null,Safari:{str:Z.vendor,search:\"Apple\",verSearch:[\"Version\",\"iPhone OS\",\"CPU OS\"]},Firefox:null,Explorer:{search:\"MSIE\",verSearch:\"MSIE\"}},E={HarmonyOS:null,Android:null,iPhone:null,iPad:null,Windows:{str:x,search:\"Win\"},Mac:{str:x},Linux:{str:x}};let e=\"unknownBrowser\",t=0,I=\"unknownOS\";for(let E in _){const I=_[E]||{};let r=I.str||W,s=I.search||E,n=I.verStr||W,C=I.verSearch||E;if(C instanceof Array||(C=[C]),-1!=r.indexOf(s)){e=E;for(let _ of C){let E=n.indexOf(_);if(-1!=E){t=parseFloat(n.substring(E+_.length+1));break}}break}}for(let _ in E){const e=E[_]||{};let t=e.str||W,r=e.search||_;if(-1!=t.indexOf(r)){I=_;break}}\"Linux\"==I&&-1!=W.indexOf(\"Windows NT\")&&(I=\"HarmonyOS\"),j={browser:e,version:t,OS:I}}r&&(j={browser:\"ssr\",version:0,OS:\"ssr\"})}();const J=\"undefined\"!=typeof WebAssembly&&W&&!(/Safari/.test(W)&&!/Chrome/.test(W)&&/\\(.+\\s11_2_([2-6]).*\\)/.test(W)),Q=!(\"undefined\"==typeof Worker),$=!(!K||!K.getUserMedia),z=async()=>{let _=!1;if($)try{(await K.getUserMedia({video:!0})).getTracks().forEach((_=>{_.stop()})),_=!0}catch(_){}return _};\"Chrome\"===j.browser&&j.version>66||\"Safari\"===j.browser&&j.version>13||\"OPR\"===j.browser&&j.version>43||\"Edge\"===j.browser&&j.version;const q={},__=async _=>{let E=\"string\"==typeof _?[_]:_,e=[];for(let _ of E)e.push(q[_]=q[_]||new X);await Promise.all(e)},E_=async(_,E)=>{let e,t=\"string\"==typeof _?[_]:_,I=[];for(let _ of t){let t;I.push(t=q[_]=q[_]||new X(e=e||E())),t.isEmpty&&(t.task=e=e||E())}await Promise.all(I)};let e_,t_=0;const I_=()=>t_++,r_={};let s_;const n_=_=>{s_=_,e_&&e_.postMessage({type:\"setBLog\",body:{value:!!_}})};let C_=!1;const i_=_=>{C_=_,e_&&e_.postMessage({type:\"setBDebug\",body:{value:!!_}})},o_={},A_={},N_={std:{version:\"1.4.10\",path:n(s+\"../../dynamsoft-capture-vision-std@1.4.10/dist/\")},core:{version:\"3.4.20\",path:s}},a_={dip:{wasm:!0}},T_={},R_=async _=>{let E;_ instanceof Array||(_=_?[_]:[]);let e=q.core;E=!e||e.isEmpty;let t=new Map;const I=_=>{if(\"std\"==(_=_.toLowerCase())||\"core\"==_)return;if(!a_[_])throw Error(\"The '\"+_+\"' module cannot be found.\");let E=a_[_].deps;if(null==E?void 0:E.length)for(let _ of E)I(_);let e=q[_];t.has(_)||t.set(_,!e||e.isEmpty)};for(let E of _)I(E);let r=[];E&&r.push(\"core\"),r.push(...t.keys());const s=[...t.entries()].filter((_=>!_[1])).map((_=>_[0]));await E_(r,(async()=>{const _=[...t.entries()].filter((_=>_[1])).map((_=>_[0]));await __(s);const e=g(T_,N_),I={};for(let E of _)I[E]=a_[E];const r={engineResourcePaths:e,autoResources:I,names:_};let n=new X;if(E){r.needLoadCore=!0;let _=e.core+L_._workerName;_.startsWith(location.origin)||(_=await fetch(_).then((_=>_.blob())).then((_=>URL.createObjectURL(_)))),e_=new Worker(_),e_.onerror=_=>{let E=new Error(_.message);n.reject(E)},e_.addEventListener(\"message\",(_=>{let E=_.data?_.data:_,e=E.type,t=E.id,I=E.body;switch(e){case\"log\":s_&&s_(E.message);break;case\"task\":try{r_[t](I),delete r_[t]}catch(_){throw delete r_[t],_}break;case\"event\":try{r_[t](I)}catch(_){throw _}break;default:console.log(_)}})),r.bLog=!!s_,r.bd=C_,r.dm=location.origin.startsWith(\"http\")?location.origin:\"https://localhost\"}else await __(\"core\");let C=t_++;r_[C]=_=>{if(_.success)Object.assign(o_,_.versions),\"{}\"!==JSON.stringify(_.versions)&&(L_._versions=_.versions),n.resolve(void 0);else{const E=Error(_.message);_.stack&&(E.stack=_.stack),n.reject(E)}},e_.postMessage({type:\"loadWasm\",body:r,id:C}),await n}))};class L_{static get engineResourcePaths(){return T_}static set engineResourcePaths(_){Object.assign(T_,_)}static get bSupportDce4Module(){return this._bSupportDce4Module}static get bSupportIRTModule(){return this._bSupportIRTModule}static get versions(){return this._versions}static get _onLog(){return s_}static set _onLog(_){n_(_)}static get _bDebug(){return C_}static set _bDebug(_){i_(_)}static isModuleLoaded(_){return _=(_=_||\"core\").toLowerCase(),!!q[_]&&q[_].isFulfilled}static async loadWasm(_){return await R_(_)}static async detectEnvironment(){return await(async()=>({wasm:J,worker:Q,getUserMedia:$,camera:await z(),browser:j.browser,version:j.version,OS:j.OS}))()}static async getModuleVersion(){return await new Promise(((_,E)=>{let e=I_();r_[e]=async e=>{if(e.success)return _(e.versions);{let _=new Error(e.message);return _.stack=e.stack+\"\\n\"+_.stack,E(_)}},e_.postMessage({type:\"getModuleVersion\",id:e})}))}static getVersion(){const _=o_.core&&o_.core.worker,E=o_.core&&o_.core.wasm;return`3.4.20(Worker: ${_||\"Not Loaded\"}, Wasm: ${E||\"Not Loaded\"})`}static enableLogging(){H._onLog=console.log,L_._onLog=console.log}static disableLogging(){H._onLog=null,L_._onLog=null}static async cfd(_){return await new Promise(((E,e)=>{let t=I_();r_[t]=async _=>{if(_.success)return E();{let E=new Error(_.message);return E.stack=_.stack+\"\\n\"+E.stack,e(E)}},e_.postMessage({type:\"cfd\",id:t,body:{count:_}})}))}}var D_,O_,c_,S_,l_,f_,h_,d_;L_._bSupportDce4Module=-1,L_._bSupportIRTModule=-1,L_._versions=null,L_._workerName=\"core.worker.js\",L_.browserInfo=j,function(_){_[_.CRIT_ORIGINAL_IMAGE=1]=\"CRIT_ORIGINAL_IMAGE\",_[_.CRIT_BARCODE=2]=\"CRIT_BARCODE\",_[_.CRIT_TEXT_LINE=4]=\"CRIT_TEXT_LINE\",_[_.CRIT_DETECTED_QUAD=8]=\"CRIT_DETECTED_QUAD\",_[_.CRIT_NORMALIZED_IMAGE=16]=\"CRIT_NORMALIZED_IMAGE\",_[_.CRIT_PARSED_RESULT=32]=\"CRIT_PARSED_RESULT\"}(D_||(D_={})),function(_){_[_.CT_NORMAL_INTERSECTED=0]=\"CT_NORMAL_INTERSECTED\",_[_.CT_T_INTERSECTED=1]=\"CT_T_INTERSECTED\",_[_.CT_CROSS_INTERSECTED=2]=\"CT_CROSS_INTERSECTED\",_[_.CT_NOT_INTERSECTED=3]=\"CT_NOT_INTERSECTED\"}(O_||(O_={})),function(_){_[_.EC_OK=0]=\"EC_OK\",_[_.EC_UNKNOWN=-1e4]=\"EC_UNKNOWN\",_[_.EC_NO_MEMORY=-10001]=\"EC_NO_MEMORY\",_[_.EC_NULL_POINTER=-10002]=\"EC_NULL_POINTER\",_[_.EC_LICENSE_INVALID=-10003]=\"EC_LICENSE_INVALID\",_[_.EC_LICENSE_EXPIRED=-10004]=\"EC_LICENSE_EXPIRED\",_[_.EC_FILE_NOT_FOUND=-10005]=\"EC_FILE_NOT_FOUND\",_[_.EC_FILE_TYPE_NOT_SUPPORTED=-10006]=\"EC_FILE_TYPE_NOT_SUPPORTED\",_[_.EC_BPP_NOT_SUPPORTED=-10007]=\"EC_BPP_NOT_SUPPORTED\",_[_.EC_INDEX_INVALID=-10008]=\"EC_INDEX_INVALID\",_[_.EC_CUSTOM_REGION_INVALID=-10010]=\"EC_CUSTOM_REGION_INVALID\",_[_.EC_IMAGE_READ_FAILED=-10012]=\"EC_IMAGE_READ_FAILED\",_[_.EC_TIFF_READ_FAILED=-10013]=\"EC_TIFF_READ_FAILED\",_[_.EC_DIB_BUFFER_INVALID=-10018]=\"EC_DIB_BUFFER_INVALID\",_[_.EC_PDF_READ_FAILED=-10021]=\"EC_PDF_READ_FAILED\",_[_.EC_PDF_DLL_MISSING=-10022]=\"EC_PDF_DLL_MISSING\",_[_.EC_PAGE_NUMBER_INVALID=-10023]=\"EC_PAGE_NUMBER_INVALID\",_[_.EC_CUSTOM_SIZE_INVALID=-10024]=\"EC_CUSTOM_SIZE_INVALID\",_[_.EC_TIMEOUT=-10026]=\"EC_TIMEOUT\",_[_.EC_JSON_PARSE_FAILED=-10030]=\"EC_JSON_PARSE_FAILED\",_[_.EC_JSON_TYPE_INVALID=-10031]=\"EC_JSON_TYPE_INVALID\",_[_.EC_JSON_KEY_INVALID=-10032]=\"EC_JSON_KEY_INVALID\",_[_.EC_JSON_VALUE_INVALID=-10033]=\"EC_JSON_VALUE_INVALID\",_[_.EC_JSON_NAME_KEY_MISSING=-10034]=\"EC_JSON_NAME_KEY_MISSING\",_[_.EC_JSON_NAME_VALUE_DUPLICATED=-10035]=\"EC_JSON_NAME_VALUE_DUPLICATED\",_[_.EC_TEMPLATE_NAME_INVALID=-10036]=\"EC_TEMPLATE_NAME_INVALID\",_[_.EC_JSON_NAME_REFERENCE_INVALID=-10037]=\"EC_JSON_NAME_REFERENCE_INVALID\",_[_.EC_PARAMETER_VALUE_INVALID=-10038]=\"EC_PARAMETER_VALUE_INVALID\",_[_.EC_DOMAIN_NOT_MATCH=-10039]=\"EC_DOMAIN_NOT_MATCH\",_[_.EC_RESERVED_INFO_NOT_MATCH=-10040]=\"EC_RESERVED_INFO_NOT_MATCH\",_[_.EC_LICENSE_KEY_NOT_MATCH=-10043]=\"EC_LICENSE_KEY_NOT_MATCH\",_[_.EC_REQUEST_FAILED=-10044]=\"EC_REQUEST_FAILED\",_[_.EC_LICENSE_INIT_FAILED=-10045]=\"EC_LICENSE_INIT_FAILED\",_[_.EC_SET_MODE_ARGUMENT_ERROR=-10051]=\"EC_SET_MODE_ARGUMENT_ERROR\",_[_.EC_LICENSE_CONTENT_INVALID=-10052]=\"EC_LICENSE_CONTENT_INVALID\",_[_.EC_LICENSE_KEY_INVALID=-10053]=\"EC_LICENSE_KEY_INVALID\",_[_.EC_LICENSE_DEVICE_RUNS_OUT=-10054]=\"EC_LICENSE_DEVICE_RUNS_OUT\",_[_.EC_GET_MODE_ARGUMENT_ERROR=-10055]=\"EC_GET_MODE_ARGUMENT_ERROR\",_[_.EC_IRT_LICENSE_INVALID=-10056]=\"EC_IRT_LICENSE_INVALID\",_[_.EC_FILE_SAVE_FAILED=-10058]=\"EC_FILE_SAVE_FAILED\",_[_.EC_STAGE_TYPE_INVALID=-10059]=\"EC_STAGE_TYPE_INVALID\",_[_.EC_IMAGE_ORIENTATION_INVALID=-10060]=\"EC_IMAGE_ORIENTATION_INVALID\",_[_.EC_CONVERT_COMPLEX_TEMPLATE_ERROR=-10061]=\"EC_CONVERT_COMPLEX_TEMPLATE_ERROR\",_[_.EC_CALL_REJECTED_WHEN_CAPTURING=-10062]=\"EC_CALL_REJECTED_WHEN_CAPTURING\",_[_.EC_NO_IMAGE_SOURCE=-10063]=\"EC_NO_IMAGE_SOURCE\",_[_.EC_READ_DIRECTORY_FAILED=-10064]=\"EC_READ_DIRECTORY_FAILED\",_[_.EC_MODULE_NOT_FOUND=-10065]=\"EC_MODULE_NOT_FOUND\",_[_.EC_MULTI_PAGES_NOT_SUPPORTED=-10066]=\"EC_MULTI_PAGES_NOT_SUPPORTED\",_[_.EC_FILE_ALREADY_EXISTS=-10067]=\"EC_FILE_ALREADY_EXISTS\",_[_.EC_CREATE_FILE_FAILED=-10068]=\"EC_CREATE_FILE_FAILED\",_[_.EC_IMGAE_DATA_INVALID=-10069]=\"EC_IMGAE_DATA_INVALID\",_[_.EC_IMAGE_SIZE_NOT_MATCH=-10070]=\"EC_IMAGE_SIZE_NOT_MATCH\",_[_.EC_IMAGE_PIXEL_FORMAT_NOT_MATCH=-10071]=\"EC_IMAGE_PIXEL_FORMAT_NOT_MATCH\",_[_.EC_SECTION_LEVEL_RESULT_IRREPLACEABLE=-10072]=\"EC_SECTION_LEVEL_RESULT_IRREPLACEABLE\",_[_.EC_AXIS_DEFINITION_INCORRECT=-10073]=\"EC_AXIS_DEFINITION_INCORRECT\",_[_.EC_RESULT_TYPE_MISMATCH_IRREPLACEABLE=-10074]=\"EC_RESULT_TYPE_MISMATCH_IRREPLACEABLE\",_[_.EC_PDF_LIBRARY_LOAD_FAILED=-10075]=\"EC_PDF_LIBRARY_LOAD_FAILED\",_[_.EC_NO_LICENSE=-2e4]=\"EC_NO_LICENSE\",_[_.EC_HANDSHAKE_CODE_INVALID=-20001]=\"EC_HANDSHAKE_CODE_INVALID\",_[_.EC_LICENSE_BUFFER_FAILED=-20002]=\"EC_LICENSE_BUFFER_FAILED\",_[_.EC_LICENSE_SYNC_FAILED=-20003]=\"EC_LICENSE_SYNC_FAILED\",_[_.EC_DEVICE_NOT_MATCH=-20004]=\"EC_DEVICE_NOT_MATCH\",_[_.EC_BIND_DEVICE_FAILED=-20005]=\"EC_BIND_DEVICE_FAILED\",_[_.EC_INSTANCE_COUNT_OVER_LIMIT=-20008]=\"EC_INSTANCE_COUNT_OVER_LIMIT\",_[_.EC_LICENSE_INIT_SEQUENCE_FAILED=-20009]=\"EC_LICENSE_INIT_SEQUENCE_FAILED\",_[_.EC_TRIAL_LICENSE=-20010]=\"EC_TRIAL_LICENSE\",_[_.EC_FAILED_TO_REACH_DLS=-20200]=\"EC_FAILED_TO_REACH_DLS\",_[_.EC_LICENSE_CACHE_USED=-20012]=\"EC_LICENSE_CACHE_USED\",_[_.EC_BARCODE_FORMAT_INVALID=-30009]=\"EC_BARCODE_FORMAT_INVALID\",_[_.EC_QR_LICENSE_INVALID=-30016]=\"EC_QR_LICENSE_INVALID\",_[_.EC_1D_LICENSE_INVALID=-30017]=\"EC_1D_LICENSE_INVALID\",_[_.EC_PDF417_LICENSE_INVALID=-30019]=\"EC_PDF417_LICENSE_INVALID\",_[_.EC_DATAMATRIX_LICENSE_INVALID=-30020]=\"EC_DATAMATRIX_LICENSE_INVALID\",_[_.EC_CUSTOM_MODULESIZE_INVALID=-30025]=\"EC_CUSTOM_MODULESIZE_INVALID\",_[_.EC_AZTEC_LICENSE_INVALID=-30041]=\"EC_AZTEC_LICENSE_INVALID\",_[_.EC_PATCHCODE_LICENSE_INVALID=-30046]=\"EC_PATCHCODE_LICENSE_INVALID\",_[_.EC_POSTALCODE_LICENSE_INVALID=-30047]=\"EC_POSTALCODE_LICENSE_INVALID\",_[_.EC_DPM_LICENSE_INVALID=-30048]=\"EC_DPM_LICENSE_INVALID\",_[_.EC_FRAME_DECODING_THREAD_EXISTS=-30049]=\"EC_FRAME_DECODING_THREAD_EXISTS\",_[_.EC_STOP_DECODING_THREAD_FAILED=-30050]=\"EC_STOP_DECODING_THREAD_FAILED\",_[_.EC_MAXICODE_LICENSE_INVALID=-30057]=\"EC_MAXICODE_LICENSE_INVALID\",_[_.EC_GS1_DATABAR_LICENSE_INVALID=-30058]=\"EC_GS1_DATABAR_LICENSE_INVALID\",_[_.EC_GS1_COMPOSITE_LICENSE_INVALID=-30059]=\"EC_GS1_COMPOSITE_LICENSE_INVALID\",_[_.EC_DOTCODE_LICENSE_INVALID=-30061]=\"EC_DOTCODE_LICENSE_INVALID\",_[_.EC_PHARMACODE_LICENSE_INVALID=-30062]=\"EC_PHARMACODE_LICENSE_INVALID\",_[_.EC_CHARACTER_MODEL_FILE_NOT_FOUND=-40100]=\"EC_CHARACTER_MODEL_FILE_NOT_FOUND\",_[_.EC_TEXT_LINE_GROUP_LAYOUT_CONFLICT=-40101]=\"EC_TEXT_LINE_GROUP_LAYOUT_CONFLICT\",_[_.EC_TEXT_LINE_GROUP_REGEX_CONFLICT=-40102]=\"EC_TEXT_LINE_GROUP_REGEX_CONFLICT\",_[_.EC_QUADRILATERAL_INVALID=-50057]=\"EC_QUADRILATERAL_INVALID\",_[_.EC_PANORAMA_LICENSE_INVALID=-70060]=\"EC_PANORAMA_LICENSE_INVALID\",_[_.EC_RESOURCE_PATH_NOT_EXIST=-90001]=\"EC_RESOURCE_PATH_NOT_EXIST\",_[_.EC_RESOURCE_LOAD_FAILED=-90002]=\"EC_RESOURCE_LOAD_FAILED\",_[_.EC_CODE_SPECIFICATION_NOT_FOUND=-90003]=\"EC_CODE_SPECIFICATION_NOT_FOUND\",_[_.EC_FULL_CODE_EMPTY=-90004]=\"EC_FULL_CODE_EMPTY\",_[_.EC_FULL_CODE_PREPROCESS_FAILED=-90005]=\"EC_FULL_CODE_PREPROCESS_FAILED\",_[_.EC_ZA_DL_LICENSE_INVALID=-90006]=\"EC_ZA_DL_LICENSE_INVALID\",_[_.EC_AAMVA_DL_ID_LICENSE_INVALID=-90007]=\"EC_AAMVA_DL_ID_LICENSE_INVALID\",_[_.EC_AADHAAR_LICENSE_INVALID=-90008]=\"EC_AADHAAR_LICENSE_INVALID\",_[_.EC_MRTD_LICENSE_INVALID=-90009]=\"EC_MRTD_LICENSE_INVALID\",_[_.EC_VIN_LICENSE_INVALID=-90010]=\"EC_VIN_LICENSE_INVALID\",_[_.EC_CUSTOMIZED_CODE_TYPE_LICENSE_INVALID=-90011]=\"EC_CUSTOMIZED_CODE_TYPE_LICENSE_INVALID\",_[_.EC_LICENSE_WARNING=-10076]=\"EC_LICENSE_WARNING\",_[_.EC_BARCODE_READER_LICENSE_NOT_FOUND=-30063]=\"EC_BARCODE_READER_LICENSE_NOT_FOUND\",_[_.EC_LABEL_RECOGNIZER_LICENSE_NOT_FOUND=-40103]=\"EC_LABEL_RECOGNIZER_LICENSE_NOT_FOUND\",_[_.EC_DOCUMENT_NORMALIZER_LICENSE_NOT_FOUND=-50058]=\"EC_DOCUMENT_NORMALIZER_LICENSE_NOT_FOUND\",_[_.EC_CODE_PARSER_LICENSE_NOT_FOUND=-90012]=\"EC_CODE_PARSER_LICENSE_NOT_FOUND\"}(c_||(c_={})),function(_){_[_.GEM_SKIP=0]=\"GEM_SKIP\",_[_.GEM_AUTO=1]=\"GEM_AUTO\",_[_.GEM_GENERAL=2]=\"GEM_GENERAL\",_[_.GEM_GRAY_EQUALIZE=4]=\"GEM_GRAY_EQUALIZE\",_[_.GEM_GRAY_SMOOTH=8]=\"GEM_GRAY_SMOOTH\",_[_.GEM_SHARPEN_SMOOTH=16]=\"GEM_SHARPEN_SMOOTH\",_[_.GEM_REV=-2147483648]=\"GEM_REV\"}(S_||(S_={})),function(_){_[_.GTM_SKIP=0]=\"GTM_SKIP\",_[_.GTM_INVERTED=1]=\"GTM_INVERTED\",_[_.GTM_ORIGINAL=2]=\"GTM_ORIGINAL\",_[_.GTM_AUTO=4]=\"GTM_AUTO\",_[_.GTM_REV=-2147483648]=\"GTM_REV\"}(l_||(l_={})),function(_){_[_.ITT_FILE_IMAGE=0]=\"ITT_FILE_IMAGE\",_[_.ITT_VIDEO_FRAME=1]=\"ITT_VIDEO_FRAME\"}(f_||(f_={})),function(_){_[_.PDFRM_VECTOR=1]=\"PDFRM_VECTOR\",_[_.PDFRM_RASTER=2]=\"PDFRM_RASTER\",_[_.PDFRM_REV=-2147483648]=\"PDFRM_REV\"}(h_||(h_={})),function(_){_[_.RDS_RASTERIZED_PAGES=0]=\"RDS_RASTERIZED_PAGES\",_[_.RDS_EXTRACTED_IMAGES=1]=\"RDS_EXTRACTED_IMAGES\"}(d_||(d_={}));const P_={IRUT_NULL:BigInt(0),IRUT_COLOUR_IMAGE:BigInt(1),IRUT_SCALED_DOWN_COLOUR_IMAGE:BigInt(2),IRUT_GRAYSCALE_IMAGE:BigInt(4),IRUT_TRANSOFORMED_GRAYSCALE_IMAGE:BigInt(8),IRUT_ENHANCED_GRAYSCALE_IMAGE:BigInt(16),IRUT_PREDETECTED_REGIONS:BigInt(32),IRUT_BINARY_IMAGE:BigInt(64),IRUT_TEXTURE_DETECTION_RESULT:BigInt(128),IRUT_TEXTURE_REMOVED_GRAYSCALE_IMAGE:BigInt(256),IRUT_TEXTURE_REMOVED_BINARY_IMAGE:BigInt(512),IRUT_CONTOURS:BigInt(1024),IRUT_LINE_SEGMENTS:BigInt(2048),IRUT_TEXT_ZONES:BigInt(4096),IRUT_TEXT_REMOVED_BINARY_IMAGE:BigInt(8192),IRUT_CANDIDATE_BARCODE_ZONES:BigInt(16384),IRUT_LOCALIZED_BARCODES:BigInt(32768),IRUT_SCALED_UP_BARCODE_IMAGE:BigInt(65536),IRUT_DEFORMATION_RESISTED_BARCODE_IMAGE:BigInt(1<<17),IRUT_COMPLEMENTED_BARCODE_IMAGE:BigInt(1<<18),IRUT_DECODED_BARCODES:BigInt(1<<19),IRUT_LONG_LINES:BigInt(1<<20),IRUT_CORNERS:BigInt(1<<21),IRUT_CANDIDATE_QUAD_EDGES:BigInt(1<<22),IRUT_DETECTED_QUADS:BigInt(1<<23),IRUT_LOCALIZED_TEXT_LINES:BigInt(1<<24),IRUT_RECOGNIZED_TEXT_LINES:BigInt(1<<25),IRUT_NORMALIZED_IMAGES:BigInt(1<<26),IRUT_SHORT_LINES:BigInt(1<<27),IRUT_RAW_TEXT_LINES:BigInt(1<<28),IRUT_ALL:BigInt(\"0xFFFFFFFFFFFFFFFF\")};var g_,M_;!function(_){_[_.ROET_PREDETECTED_REGION=0]=\"ROET_PREDETECTED_REGION\",_[_.ROET_LOCALIZED_BARCODE=1]=\"ROET_LOCALIZED_BARCODE\",_[_.ROET_DECODED_BARCODE=2]=\"ROET_DECODED_BARCODE\",_[_.ROET_LOCALIZED_TEXT_LINE=3]=\"ROET_LOCALIZED_TEXT_LINE\",_[_.ROET_RECOGNIZED_TEXT_LINE=4]=\"ROET_RECOGNIZED_TEXT_LINE\",_[_.ROET_DETECTED_QUAD=5]=\"ROET_DETECTED_QUAD\",_[_.ROET_NORMALIZED_IMAGE=6]=\"ROET_NORMALIZED_IMAGE\",_[_.ROET_SOURCE_IMAGE=7]=\"ROET_SOURCE_IMAGE\",_[_.ROET_TARGET_ROI=8]=\"ROET_TARGET_ROI\"}(g_||(g_={})),function(_){_[_.ST_NULL=0]=\"ST_NULL\",_[_.ST_REGION_PREDETECTION=1]=\"ST_REGION_PREDETECTION\",_[_.ST_BARCODE_LOCALIZATION=2]=\"ST_BARCODE_LOCALIZATION\",_[_.ST_BARCODE_DECODING=3]=\"ST_BARCODE_DECODING\",_[_.ST_TEXT_LINE_LOCALIZATION=4]=\"ST_TEXT_LINE_LOCALIZATION\",_[_.ST_TEXT_LINE_RECOGNITION=5]=\"ST_TEXT_LINE_RECOGNITION\",_[_.ST_DOCUMENT_DETECTION=6]=\"ST_DOCUMENT_DETECTION\",_[_.ST_DOCUMENT_NORMALIZATION=7]=\"ST_DOCUMENT_NORMALIZATION\"}(M_||(M_={}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/dynamsoft-core/dist/core.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/dynamsoft-document-normalizer/dist/ddn.esm.js":
/*!********************************************************************!*\
  !*** ./node_modules/dynamsoft-document-normalizer/dist/ddn.esm.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentNormalizerModule: function() { return /* binding */ C; },\n/* harmony export */   EnumImageColourMode: function() { return /* binding */ v; }\n/* harmony export */ });\n/* harmony import */ var dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dynamsoft-core */ \"(app-pages-browser)/./node_modules/dynamsoft-core/dist/core.esm.js\");\n/*!\n* Dynamsoft JavaScript Library\n* @product Dynamsoft Document Normalizer JS Edition\n* @website http://www.dynamsoft.com\n* @copyright Copyright 2024, Dynamsoft Corporation\n* @author Dynamsoft\n* @version 2.4.20\n* @fileoverview Dynamsoft JavaScript Library for Document Normalizer\n* More info on ddn JS: https://www.dynamsoft.com/document-normalizer/docs/web/programming/javascript/\n*/\nconst p=\"undefined\"==typeof self,g=(()=>{if(!p&&document.currentScript){let e=document.currentScript.src,t=e.indexOf(\"?\");if(-1!=t)e=e.substring(0,t);else{let t=e.indexOf(\"#\");-1!=t&&(e=e.substring(0,t))}return e.substring(0,e.lastIndexOf(\"/\")+1)}return\"./\"})(),h=e=>{if(null==e&&(e=\"./\"),p);else{let t=document.createElement(\"a\");t.href=e,e=t.href}return e.endsWith(\"/\")||(e+=\"/\"),e};dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.ddn={version:\"2.4.20\",path:g},dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.workerAutoResources.ddn={js:!0,wasm:!0,deps:[\"license\",\"dip\"]},dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapPackageRegister.ddn={handleNormalizedImageResultItem:function(i){let d=i,o=(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__._getNorImageData)(d.imageData);d.toCanvas=()=>(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__._toCanvas)(o),d.toImage=e=>(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__._toImage)(e,o),d.toBlob=e=>(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__._toBlob)(e,o),d.saveToFile=async(e,t)=>{if(!e)return null;if(\"string\"!=typeof e)throw new TypeError(\"FileName must be of type string.\");return (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__._saveToFile)(o,e,t)}}};const y=\"1.4.10\";\"string\"!=typeof dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.std&&(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.compareVersion)(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.std.version,y)<0&&(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.std={version:y,path:h(g+`../../dynamsoft-capture-vision-std@${y}/dist/`)});const I=\"2.4.20\";(!dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.dip||\"string\"!=typeof dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.dip&&(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.compareVersion)(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.dip.version,I)<0)&&(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.dip={version:I,path:h(g+`../../dynamsoft-image-processing@${I}/dist/`)});class C{static getVersion(){const e=dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.innerVersions.ddn&&dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.innerVersions.ddn.wasm,t=dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.innerVersions.ddn&&dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.innerVersions.ddn.worker;return`2.4.20(Worker: ${t||\"Not Loaded\"}, Wasm: ${e||\"Not Loaded\"})`}async setThresholdValue(e,t,s,n){return await (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.loadWasm)(\"ddn\"),await new Promise(((r,i)=>{let d=(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[d]=async e=>{if(e.success)return r();{let t=new Error(e.message);return t.stack=e.stack+\"\\n\"+t.stack,i(t)}},dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({type:\"ddn_setThresholdValue\",id:d,instanceID:e._instanceID,body:{threshold:t,leftLimit:s,rightLimit:n}})}))}}var v;!function(e){e[e.ICM_COLOUR=0]=\"ICM_COLOUR\",e[e.ICM_GRAYSCALE=1]=\"ICM_GRAYSCALE\",e[e.ICM_BINARY=2]=\"ICM_BINARY\"}(v||(v={}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9keW5hbXNvZnQtZG9jdW1lbnQtbm9ybWFsaXplci9kaXN0L2Rkbi5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDK1IseUNBQXlDLCtCQUErQixrREFBa0QsNEJBQTRCLEtBQUsscUJBQXFCLDRCQUE0QiwyQ0FBMkMsV0FBVyxVQUFVLHdCQUF3QixLQUFLLGtDQUFrQyxrQkFBa0Isb0NBQW9DLDhEQUFDLE1BQU0sd0JBQXdCLENBQUMsK0RBQUMsTUFBTSxxQ0FBcUMsQ0FBQyw4REFBQyxNQUFNLDRDQUE0QyxVQUFVLGdFQUFDLGNBQWMsZUFBZSx5REFBQyxpQkFBaUIsd0RBQUMsa0JBQWtCLHVEQUFDLGdDQUFnQyxrQkFBa0IsOEVBQThFLE9BQU8sMkRBQUMsV0FBVyxpQkFBaUIsaUJBQWlCLDhEQUFDLE1BQU0sOERBQUMsQ0FBQyw4REFBQyxvQkFBb0IsOERBQUMsTUFBTSx5REFBeUQsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsOERBQUMsdUJBQXVCLDhEQUFDLE1BQU0sOERBQUMsQ0FBQyw4REFBQyxxQkFBcUIsOERBQUMsTUFBTSx1REFBdUQsRUFBRSxTQUFTLEVBQUUsUUFBUSxvQkFBb0IsUUFBUSx5REFBQyxNQUFNLHlEQUFDLFlBQVkseURBQUMsTUFBTSx5REFBQyxZQUFZLHdCQUF3QixnQkFBZ0IsVUFBVSxnQkFBZ0IsR0FBRyxpQ0FBaUMsYUFBYSx3REFBQyxtQ0FBbUMsTUFBTSw2REFBQyxHQUFHLDJEQUFDLGNBQWMseUJBQXlCLDJCQUEyQiwwQ0FBMEMsQ0FBQyxrREFBQyxjQUFjLGlFQUFpRSxzQ0FBc0MsRUFBRSxJQUFJLE1BQU0sYUFBYSxtR0FBbUcsU0FBUyxHQUFrRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZHluYW1zb2Z0LWRvY3VtZW50LW5vcm1hbGl6ZXIvZGlzdC9kZG4uZXNtLmpzPzBlZWQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4qIER5bmFtc29mdCBKYXZhU2NyaXB0IExpYnJhcnlcbiogQHByb2R1Y3QgRHluYW1zb2Z0IERvY3VtZW50IE5vcm1hbGl6ZXIgSlMgRWRpdGlvblxuKiBAd2Vic2l0ZSBodHRwOi8vd3d3LmR5bmFtc29mdC5jb21cbiogQGNvcHlyaWdodCBDb3B5cmlnaHQgMjAyNCwgRHluYW1zb2Z0IENvcnBvcmF0aW9uXG4qIEBhdXRob3IgRHluYW1zb2Z0XG4qIEB2ZXJzaW9uIDIuNC4yMFxuKiBAZmlsZW92ZXJ2aWV3IER5bmFtc29mdCBKYXZhU2NyaXB0IExpYnJhcnkgZm9yIERvY3VtZW50IE5vcm1hbGl6ZXJcbiogTW9yZSBpbmZvIG9uIGRkbiBKUzogaHR0cHM6Ly93d3cuZHluYW1zb2Z0LmNvbS9kb2N1bWVudC1ub3JtYWxpemVyL2RvY3Mvd2ViL3Byb2dyYW1taW5nL2phdmFzY3JpcHQvXG4qL1xuaW1wb3J0e19nZXROb3JJbWFnZURhdGEgYXMgZSxfdG9DYW52YXMgYXMgdCxfdG9JbWFnZSBhcyBzLF90b0Jsb2IgYXMgbixfc2F2ZVRvRmlsZSBhcyByLGF1dG9EaXNjb3ZlcnlQYXRocyBhcyBpLHdvcmtlckF1dG9SZXNvdXJjZXMgYXMgZCxtYXBQYWNrYWdlUmVnaXN0ZXIgYXMgbyxjb21wYXJlVmVyc2lvbiBhcyBhLGlubmVyVmVyc2lvbnMgYXMgYyxsb2FkV2FzbSBhcyBsLGdldE5leHRUYXNrSUQgYXMgdSxtYXBUYXNrQ2FsbEJhY2sgYXMgZix3b3JrZXIgYXMgbX1mcm9tXCJkeW5hbXNvZnQtY29yZVwiO2NvbnN0IHA9XCJ1bmRlZmluZWRcIj09dHlwZW9mIHNlbGYsZz0oKCk9PntpZighcCYmZG9jdW1lbnQuY3VycmVudFNjcmlwdCl7bGV0IGU9ZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMsdD1lLmluZGV4T2YoXCI/XCIpO2lmKC0xIT10KWU9ZS5zdWJzdHJpbmcoMCx0KTtlbHNle2xldCB0PWUuaW5kZXhPZihcIiNcIik7LTEhPXQmJihlPWUuc3Vic3RyaW5nKDAsdCkpfXJldHVybiBlLnN1YnN0cmluZygwLGUubGFzdEluZGV4T2YoXCIvXCIpKzEpfXJldHVyblwiLi9cIn0pKCksaD1lPT57aWYobnVsbD09ZSYmKGU9XCIuL1wiKSxwKTtlbHNle2xldCB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO3QuaHJlZj1lLGU9dC5ocmVmfXJldHVybiBlLmVuZHNXaXRoKFwiL1wiKXx8KGUrPVwiL1wiKSxlfTtpLmRkbj17dmVyc2lvbjpcIjIuNC4yMFwiLHBhdGg6Z30sZC5kZG49e2pzOiEwLHdhc206ITAsZGVwczpbXCJsaWNlbnNlXCIsXCJkaXBcIl19LG8uZGRuPXtoYW5kbGVOb3JtYWxpemVkSW1hZ2VSZXN1bHRJdGVtOmZ1bmN0aW9uKGkpe2xldCBkPWksbz1lKGQuaW1hZ2VEYXRhKTtkLnRvQ2FudmFzPSgpPT50KG8pLGQudG9JbWFnZT1lPT5zKGUsbyksZC50b0Jsb2I9ZT0+bihlLG8pLGQuc2F2ZVRvRmlsZT1hc3luYyhlLHQpPT57aWYoIWUpcmV0dXJuIG51bGw7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZpbGVOYW1lIG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuXCIpO3JldHVybiByKG8sZSx0KX19fTtjb25zdCB5PVwiMS40LjEwXCI7XCJzdHJpbmdcIiE9dHlwZW9mIGkuc3RkJiZhKGkuc3RkLnZlcnNpb24seSk8MCYmKGkuc3RkPXt2ZXJzaW9uOnkscGF0aDpoKGcrYC4uLy4uL2R5bmFtc29mdC1jYXB0dXJlLXZpc2lvbi1zdGRAJHt5fS9kaXN0L2ApfSk7Y29uc3QgST1cIjIuNC4yMFwiOyghaS5kaXB8fFwic3RyaW5nXCIhPXR5cGVvZiBpLmRpcCYmYShpLmRpcC52ZXJzaW9uLEkpPDApJiYoaS5kaXA9e3ZlcnNpb246SSxwYXRoOmgoZytgLi4vLi4vZHluYW1zb2Z0LWltYWdlLXByb2Nlc3NpbmdAJHtJfS9kaXN0L2ApfSk7Y2xhc3MgQ3tzdGF0aWMgZ2V0VmVyc2lvbigpe2NvbnN0IGU9Yy5kZG4mJmMuZGRuLndhc20sdD1jLmRkbiYmYy5kZG4ud29ya2VyO3JldHVybmAyLjQuMjAoV29ya2VyOiAke3R8fFwiTm90IExvYWRlZFwifSwgV2FzbTogJHtlfHxcIk5vdCBMb2FkZWRcIn0pYH1hc3luYyBzZXRUaHJlc2hvbGRWYWx1ZShlLHQscyxuKXtyZXR1cm4gYXdhaXQgbChcImRkblwiKSxhd2FpdCBuZXcgUHJvbWlzZSgoKHIsaSk9PntsZXQgZD11KCk7ZltkXT1hc3luYyBlPT57aWYoZS5zdWNjZXNzKXJldHVybiByKCk7e2xldCB0PW5ldyBFcnJvcihlLm1lc3NhZ2UpO3JldHVybiB0LnN0YWNrPWUuc3RhY2srXCJcXG5cIit0LnN0YWNrLGkodCl9fSxtLnBvc3RNZXNzYWdlKHt0eXBlOlwiZGRuX3NldFRocmVzaG9sZFZhbHVlXCIsaWQ6ZCxpbnN0YW5jZUlEOmUuX2luc3RhbmNlSUQsYm9keTp7dGhyZXNob2xkOnQsbGVmdExpbWl0OnMscmlnaHRMaW1pdDpufX0pfSkpfX12YXIgdjshZnVuY3Rpb24oZSl7ZVtlLklDTV9DT0xPVVI9MF09XCJJQ01fQ09MT1VSXCIsZVtlLklDTV9HUkFZU0NBTEU9MV09XCJJQ01fR1JBWVNDQUxFXCIsZVtlLklDTV9CSU5BUlk9Ml09XCJJQ01fQklOQVJZXCJ9KHZ8fCh2PXt9KSk7ZXhwb3J0e0MgYXMgRG9jdW1lbnROb3JtYWxpemVyTW9kdWxlLHYgYXMgRW51bUltYWdlQ29sb3VyTW9kZX07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/dynamsoft-document-normalizer/dist/ddn.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/dynamsoft-license/dist/license.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/dynamsoft-license/dist/license.esm.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LicenseManager: function() { return /* binding */ D; },\n/* harmony export */   LicenseModule: function() { return /* binding */ R; }\n/* harmony export */ });\n/* harmony import */ var dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dynamsoft-core */ \"(app-pages-browser)/./node_modules/dynamsoft-core/dist/core.esm.js\");\n/*!\n * Dynamsoft JavaScript Library\n * @product Dynamsoft License JS Edition\n * @website https://www.dynamsoft.com\n * @copyright Copyright 2024, Dynamsoft Corporation\n * @author Dynamsoft\n * @version 3.4.21\n * @fileoverview Dynamsoft JavaScript Library for Core\n * More info DL JS: https://www.dynamsoft.com/capture-vision/docs/web/programming/javascript/api-reference/license/license-module.html\n */\nconst m=\"undefined\"==typeof self,p=m?{}:self,v=(()=>{if(!m&&document.currentScript){let e=document.currentScript.src,t=e.indexOf(\"?\");if(-1!=t)e=e.substring(0,t);else{let t=e.indexOf(\"#\");-1!=t&&(e=e.substring(0,t))}return e.substring(0,e.lastIndexOf(\"/\")+1)}return\"./\"})(),y=e=>{if(null==e&&(e=\"./\"),m);else{let t=document.createElement(\"a\");t.href=e,e=t.href}return e.endsWith(\"/\")||(e+=\"/\"),e},w=e=>e&&\"object\"==typeof e&&\"function\"==typeof e.then;class b extends Promise{get status(){return this._s}get isPending(){return\"pending\"===this._s}get isFulfilled(){return\"fulfilled\"===this._s}get isRejected(){return\"rejected\"===this._s}get task(){return this._task}set task(e){let t;this._task=e,w(e)?t=e:\"function\"==typeof e&&(t=new Promise(e)),t&&(async()=>{try{const s=await t;e===this._task&&this.resolve(s)}catch(t){e===this._task&&this.reject(t)}})()}get isEmpty(){return null==this._task}constructor(e){let t,s;super(((e,r)=>{t=e,s=r})),this._s=\"pending\",this.resolve=e=>{this.isPending&&(w(e)?this.task=e:(this._s=\"fulfilled\",t(e)))},this.reject=e=>{this.isPending&&(this._s=\"rejected\",s(e))},this.task=e}}const S=\" is not allowed to change after `createInstance` or `loadWasm` is called.\",_=!m&&document.currentScript&&(document.currentScript.getAttribute(\"data-license\")||document.currentScript.getAttribute(\"data-productKeys\")||document.currentScript.getAttribute(\"data-licenseKey\")||document.currentScript.getAttribute(\"data-handshakeCode\")||document.currentScript.getAttribute(\"data-organizationID\"))||\"\",k=(e,t)=>{const s=e;if(s._license!==t){if(!s._pLoad.isEmpty)throw new Error(\"`license`\"+S);s._license=t}};!m&&document.currentScript&&document.currentScript.getAttribute(\"data-sessionPassword\");const E=e=>{if(null==e)e=[];else{e=e instanceof Array?[...e]:[e];for(let t=0;t<e.length;++t){if(!m){let s=document.createElement(\"a\");s.href=e[t],e[t]=s.href}e[t].endsWith(\"/\")||(e[t]+=\"/\")}}return e},L=(e,t)=>{t=E(t);const s=e;if(s._licenseServer!==t){if(!s._pLoad.isEmpty)throw new Error(\"`licenseServer`\"+S);s._licenseServer=t}},O=(e,t)=>{t=t||\"\";const s=e;if(s._deviceFriendlyName!==t){if(!s._pLoad.isEmpty)throw new Error(\"`deviceFriendlyName`\"+S);s._deviceFriendlyName=t}};let C,x,N,P,W;\"undefined\"!=typeof navigator&&(C=navigator,x=C.userAgent,N=C.platform,P=C.mediaDevices),function(){if(!m){const e={Edge:{search:\"Edg\",verSearch:\"Edg\"},OPR:null,Chrome:null,Safari:{str:C.vendor,search:\"Apple\",verSearch:[\"Version\",\"iPhone OS\",\"CPU OS\"]},Firefox:null,Explorer:{search:\"MSIE\",verSearch:\"MSIE\"}},t={HarmonyOS:null,Android:null,iPhone:null,iPad:null,Windows:{str:N,search:\"Win\"},Mac:{str:N},Linux:{str:N}};let s=\"unknownBrowser\",r=0,i=\"unknownOS\";for(let t in e){const i=e[t]||{};let n=i.str||x,o=i.search||t,a=i.verStr||x,l=i.verSearch||t;if(l instanceof Array||(l=[l]),-1!=n.indexOf(o)){s=t;for(let e of l){let t=a.indexOf(e);if(-1!=t){r=parseFloat(a.substring(t+e.length+1));break}}break}}for(let e in t){const s=t[e]||{};let r=s.str||x,n=s.search||e;if(-1!=r.indexOf(n)){i=e;break}}\"Linux\"==i&&-1!=x.indexOf(\"Windows NT\")&&(i=\"HarmonyOS\"),W={browser:s,version:r,OS:i}}m&&(W={browser:\"ssr\",version:0,OS:\"ssr\"})}(),P&&P.getUserMedia,\"Chrome\"===W.browser&&W.version>66||\"Safari\"===W.browser&&W.version>13||\"OPR\"===W.browser&&W.version>43||\"Edge\"===W.browser&&W.version;const A=()=>((0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.loadWasm)(\"license\"),(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.doOrWaitAsyncDependency)(\"dynamsoft_inited\",(async()=>{let{lt:e,l:t,ls:s,sp:u,rmk:f,cv:h}=((e,t=!1)=>{const s=e;if(s._pLoad.isEmpty){let e,r,i,n=s._license||\"\",o=JSON.parse(JSON.stringify(s._licenseServer)),a=s._sessionPassword,l=0;if(n.startsWith(\"t\")||n.startsWith(\"f\"))l=0;else if(0===n.length||n.startsWith(\"P\")||n.startsWith(\"L\")||n.startsWith(\"Y\")||n.startsWith(\"A\"))l=1;else{l=2;const t=n.indexOf(\":\");-1!=t&&(n=n.substring(t+1));const s=n.indexOf(\"?\");if(-1!=s&&(r=n.substring(s+1),n=n.substring(0,s)),n.startsWith(\"DLC2\"))l=0;else{if(n.startsWith(\"DLS2\")){let t;try{let e=n.substring(4);e=atob(e),t=JSON.parse(e)}catch(e){throw new Error(\"Format Error: The license string you specified is invalid, please check to make sure it is correct.\")}if(n=t.handshakeCode?t.handshakeCode:t.organizationID?t.organizationID:\"\",\"number\"==typeof n&&(n=JSON.stringify(n)),0===o.length){let e=[];t.mainServerURL&&(e[0]=t.mainServerURL),t.standbyServerURL&&(e[1]=t.standbyServerURL),o=E(e)}!a&&t.sessionPassword&&(a=t.sessionPassword),e=t.remark}n&&\"200001\"!==n&&!n.startsWith(\"200001-\")||(l=1)}}if(l&&(t||(p.crypto||(i=\"Please upgrade your browser to support online key.\"),p.crypto.subtle||(i=\"Require https to use online key in this browser.\"))),i){if(1!==l)throw new Error(i);l=0,console.warn(i),s._lastErrorCode=-1,s._lastErrorString=i}return 1===l&&(n=\"\",console.warn(\"Applying for a public trial license ...\")),{lt:l,l:n,ls:o,sp:a,rmk:e,cv:r}}throw new Error(\"Can't preprocess license again\"+S)})(D),g=new b;D._pLoad.task=g,(async()=>{try{await D._pLoad}catch(e){}})();let m=(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[m]=t=>{if(t.message&&D._onAuthMessage){let e=D._onAuthMessage(t.message);null!=e&&(t.message=e)}let s,r=!1;if(1===e&&(r=!0),t.success?(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.onLog&&(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.onLog)(\"init license success\"),t.message&&console.warn(t.message),dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.CoreModule._bSupportIRTModule=t.bSupportIRTModule,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.CoreModule._bSupportDce4Module=t.bSupportDce4Module,D.bPassValidation=!0,[0,-10076].includes(t.initLicenseInfo.errorCode)?[-10076].includes(t.initLicenseInfo.errorCode)&&console.warn(t.initLicenseInfo.errorString):g.reject(new Error(t.initLicenseInfo.errorString))):(s=Error(t.message),t.stack&&(s.stack=t.stack),t.ltsErrorCode&&(s.ltsErrorCode=t.ltsErrorCode),r||111==t.ltsErrorCode&&-1!=t.message.toLowerCase().indexOf(\"trial license\")&&(r=!0)),r){const e=(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.handleEngineResourcePaths)(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.CoreModule.engineResourcePaths,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths);(async(e,t,s)=>{if(!e._bNeverShowDialog)try{let r=await fetch(e.engineResourcePath+\"dls.license.dialog.html\");if(!r.ok)throw Error(\"Get license dialog fail. Network Error: \"+r.statusText);let i=await r.text();if(!i.trim().startsWith(\"<\"))throw Error(\"Get license dialog fail. Can't get valid HTMLElement.\");let n=document.createElement(\"div\");n.innerHTML=i;let o=[];for(let e=0;e<n.childElementCount;++e){let t=n.children[e];t instanceof HTMLStyleElement&&(o.push(t),document.head.append(t))}let a=1==n.childElementCount?n.children[0]:n;a.remove();let l,c,d,u,f,h=[a],g=a.children;for(let e of g)h.push(e);for(let e=0;e<h.length;++e)for(let t of h[e].children)h.push(t);for(let e of h)if(!l&&e.classList.contains(\"dls-license-mask\"))l=e,e.addEventListener(\"click\",(t=>{if(e==t.target){a.remove();for(let e of o)e.remove()}}));else if(!c&&e.classList.contains(\"dls-license-icon-close\"))c=e,e.addEventListener(\"click\",(()=>{a.remove();for(let e of o)e.remove()}));else if(!d&&e.classList.contains(\"dls-license-icon-error\"))d=e,\"error\"!=t&&e.remove();else if(!u&&e.classList.contains(\"dls-license-icon-warn\"))u=e,\"warn\"!=t&&e.remove();else if(!f&&e.classList.contains(\"dls-license-msg-content\")){f=e;let t=s;for(;t;){let s=t.indexOf(\"[\"),r=t.indexOf(\"]\",s),i=t.indexOf(\"(\",r),n=t.indexOf(\")\",i);if(-1==s||-1==r||-1==i||-1==n){e.appendChild(new Text(t));break}s>0&&e.appendChild(new Text(t.substring(0,s)));let o=document.createElement(\"a\"),a=t.substring(s+1,r);o.innerText=a;let l=t.substring(i+1,n);o.setAttribute(\"href\",l),o.setAttribute(\"target\",\"_blank\"),e.appendChild(o),t=t.substring(n+1)}}document.body.appendChild(a)}catch(t){e._onLog&&e._onLog(t.message||t)}})({_bNeverShowDialog:D._bNeverShowDialog,engineResourcePath:e.license,_onLog:dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.onLog},t.success?\"warn\":\"error\",t.message)}t.success?g.resolve(void 0):g.reject(s)},await (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.waitAsyncDependency)(\"core\"),dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({type:\"license_dynamsoft\",body:{v:\"3.4.21\",brtk:!!e,bptk:1===e,l:t,os:W,fn:D.deviceFriendlyName,ls:s,sp:u,rmk:f,cv:h},id:m}),D.bCallInitLicense=!0,await g})));let I;dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapPackageRegister.license={},dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapPackageRegister.license.dynamsoft=A,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapPackageRegister.license.getAR=async()=>{{let e=dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapAsyncDependency.dynamsoft_inited;e&&e.isRejected&&await e}return dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker?new Promise(((e,t)=>{let s=(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[s]=async s=>{if(s.success){delete s.success;{let e=D.license;e&&(e.startsWith(\"t\")||e.startsWith(\"f\"))&&(s.pk=e)}if(Object.keys(s).length){if(s.lem){let e=Error(s.lem);e.ltsErrorCode=s.lec,delete s.lem,delete s.lec,s.ae=e}e(s)}else e(null)}else{let e=Error(s.message);s.stack&&(e.stack=s.stack),t(e)}},dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({type:\"license_getAR\",id:s})})):null};class D{static setLicenseServer(e){L(D,e)}static get license(){return this._license}static set license(e){k(D,e)}static get licenseServer(){return this._licenseServer}static set licenseServer(e){L(D,e)}static get deviceFriendlyName(){return this._deviceFriendlyName}static set deviceFriendlyName(e){O(D,e)}static initLicense(e,t){if(k(D,e),D.bCallInitLicense=!0,\"boolean\"==typeof t&&t||\"object\"==typeof t&&t.executeNow)return A()}static setDeviceFriendlyName(e){O(D,e)}static getDeviceFriendlyName(){return D._deviceFriendlyName}static getDeviceUUID(){return(async()=>(await (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.doOrWaitAsyncDependency)(\"dynamsoft_uuid\",(async()=>{await (0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.loadWasm)();let e=new b,s=(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.getNextTaskID)();dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapTaskCallBack[s]=t=>{if(t.success)e.resolve(t.uuid);else{const s=Error(t.message);t.stack&&(s.stack=t.stack),e.reject(s)}},dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.worker.postMessage({type:\"license_getDeviceUUID\",id:s}),I=await e})),I))()}}D._pLoad=new b,D.bPassValidation=!1,D.bCallInitLicense=!1,D._license=_,D._licenseServer=[],D._deviceFriendlyName=\"\",dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.license={version:\"3.4.21\",path:v},dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.workerAutoResources.license={wasm:!0,js:!0},dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.mapPackageRegister.license.LicenseManager=D;const M=\"1.4.10\";\"string\"!=typeof dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.std&&(0,dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.compareVersion)(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.std.version,M)<0&&(dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.autoDiscoveryPaths.std={version:M,path:y(v+`../../dynamsoft-capture-vision-std@${M}/dist/`)});class R{static getVersion(){return`3.4.21(Worker: ${dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.innerVersions.license&&dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.innerVersions.license.worker||\"Not Loaded\"}, Wasm: ${dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.innerVersions.license&&dynamsoft_core__WEBPACK_IMPORTED_MODULE_0__.innerVersions.license.wasm||\"Not Loaded\"})`}}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/dynamsoft-license/dist/license.esm.js\n"));

/***/ })

}]);